<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Andylmns</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yunhao.space/"/>
  <updated>2019-01-23T05:03:13.357Z</updated>
  <id>http://yunhao.space/</id>
  
  <author>
    <name>Sweet、汤圆儿</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>代数中的 群 环 域</title>
    <link href="http://yunhao.space/2018/11/07/group-ring-field-in-mathematics/"/>
    <id>http://yunhao.space/2018/11/07/group-ring-field-in-mathematics/</id>
    <published>2018-11-07T06:19:19.000Z</published>
    <updated>2019-01-23T05:03:13.357Z</updated>
    
    <content type="html"><![CDATA[<p>最近总是碰到群环域这些东西，抽空学习了一下，写篇博客加深印象。本文综合各种博客，百科写成。本人不是学数学出身。本文只是自己的理解。</p><a id="more"></a><h1 id="引例-整数加法群"><a href="#引例-整数加法群" class="headerlink" title="引例 整数加法群"></a>引例 整数加法群</h1><p>最常见的群之一是整数集 $\mathbb {Z}$ 和整数的加法所构成的群。它由以下数列组成：<br>$…, −4, −3, −2, −1, 0, 1, 2, 3, 4, …$<br>群有四个公理。以上面的加法群为例。如下：  </p><ul><li>封闭性： 对于任何两个整数$a$和$b$，它们的和$a + b$也是整数。换句话说，在任何时候，把两个整数相加都能得出整数的结果。这个性质叫做在加法下封闭。  </li><li>结合律： 对于任何整数$a$, $b$和$c$，$(a + b) + c = a +（b + c）$。用话语来表达，先把a加到b，然后把它们的和加到c，所得到的结果与把a加到b与c的和是相等的。这个性质叫做结合律。  </li><li>单位元： 如果$a$是任何整数，那么$0 + a = a + 0 = a$。零叫做加法的单位元，因为把它加到任何整数都得到相同的整数。  </li><li>逆元： 对于任何整数$a$，存在另一个整数$b$使得$a + b = b + a = 0$。整数$b$叫做整数$a$的逆元，记为$−a$。  </li></ul><h1 id="群"><a href="#群" class="headerlink" title="群"></a>群</h1><h2 id="群的定义"><a href="#群的定义" class="headerlink" title="群的定义"></a>群的定义</h2><p>群$(G,·)$是由集合$G$和二元运算$·$构成的，符合以下四个性质（称“群公理”）的数学结构。其中，二元运算结合任何两个元素$a$和$b$而形成另一个元素，记为$a·b$，符号$·$是具体的运算，比如整数加法。  </p><h2 id="群的四个公理"><a href="#群的四个公理" class="headerlink" title="群的四个公理"></a>群的四个公理</h2><ul><li>封闭性： 对于所有$G$中$a$, $b$，运算$a·b$的结果也在$G$中。  </li><li>结合律： 对于所有$G$中的$a$, $b$和$c$，等式$(a·b)·c = a· (b·c)$成立。  </li><li>单位元： 存在$G$中的一个元素$e$，使得对于所有$G$中的元素$a$，总有等式$e·a = a·e = a$成立。  </li><li>逆元： 对于每个$G$中的$a$，存在$G$中的一个元素$b$使得总有$a·b = b·a = e$，此处$e$为单位元。  </li></ul><h2 id="阿贝尔群"><a href="#阿贝尔群" class="headerlink" title="阿贝尔群"></a>阿贝尔群</h2><p>群运算的次序很重要，把元素$a$与元素$b$结合，所得到的结果不一定与把元素$b$与元素$a$结合相同；$a\cdot b=b\cdot a$(交换律)不一定恒成立。<br><strong>阿贝尔群</strong>的群运算符合交换律，因此阿贝尔群也被称为<strong>交换群</strong>。它由自身的集合$G$和二元运算$*$构成。它除了满足一般的群公理，封闭性、结合律、单位元、逆元之外，还满足交换律公理$a*b=b*a$<br>因为阿贝尔群的群运算满足交换律和结合律，群元素乘积的值与乘法运算时的次序无关。<br>群运算不满足交换律的群被称为“非阿贝尔群”，或“非交换群”。<br>阿贝尔群有两种主要运算符号,加法和乘法。  </p><table><thead><tr><th>约定</th><th>运算</th><th>单位元</th><th>幂</th><th>逆元</th></tr></thead><tbody><tr><td>加法运算</td><td>$x + y$</td><td>$0$</td><td>$nx$</td><td>$−x$</td></tr><tr><td>乘法运算</td><td>$x * y$或$xy$</td><td>$e$或$1$</td><td>$x^n$</td><td>$x^{−1}$</td></tr></tbody></table><h2 id="半群"><a href="#半群" class="headerlink" title="半群"></a>半群</h2><p>半群的运算经常指示为乘号。<br>集合$S$和其上的二元运算$·$: $S×S \rightarrow S$。若$·$满足结合律，即：$\forall x,y,z \in S$，有$(x·y)·z=x·(y·z)$，则称有序对$(S,·)$为半群，运算$·$称为该半群的乘法。<br>即半群只满足群的四个公理中的封闭性和结合律。  </p><h1 id="环"><a href="#环" class="headerlink" title="环"></a>环</h1><h2 id="环的定义"><a href="#环的定义" class="headerlink" title="环的定义"></a>环的定义</h2><p>集合$R$和定义于其上的二元运算$+$和$·$，$(R, +, ·)$构成一个环，若它们满足：  </p><ul><li>$(R, +)$形成一个交换群，其单位元称为零元，记作$0$。即：  <ul><li>封闭性： $(R, +)$是封闭的  </li><li>结合律： $(a + b) + c = a + (b + c)$  </li><li>单位元： $0 + a = a + 0 = a$  </li><li>逆元： $\forall a, \exists -a$, 满足$a + −a = −a + a = 0$  </li><li>交换律： $(a + b) = (b + a)$  </li></ul></li><li>$(R, ·)$形成一个半群。即：  <ul><li>封闭性： $(R, ·)$是封闭的  </li><li>结合律： $(a·b)·c = a·(b·c)$  </li></ul></li><li>乘法关于加法满足分配律。即：  <ul><li>$a·(b + c) = (a·b) + (a·c)$  </li><li>$(a + b)·c = (a·c) + (b·c)$  </li></ul></li></ul><p>就是一个交换群和一个半群的结合。环在群的基础上限制更加严格了一些。  </p><h2 id="除环"><a href="#除环" class="headerlink" title="除环"></a>除环</h2><p>除环（division ring），又译反对称体（skew field），是一类特殊的环，在环内除法运算有效。除环内必有非$0$元素，且环内所有的非$0$量都有对应的倒数（比如说，对于$x$来说，存在数$a$，使得 $a·x = x·a = 1$）。除环不一定是交换环。<br>换种说法，一个环是除环当且仅当其可逆元群包含了环中所有的非零元素。<br>也就是说，$(R, ·)$有乘法单位元，并且每个非零元素都有对应的乘法逆元。即，在环的基础上要求$(R, ·)$是群。  </p><h1 id="域"><a href="#域" class="headerlink" title="域"></a>域</h1><p>非正式的讲，域是种集合，集合中的元素可以做两种运算，”加法”： $a+b$和”乘法”： $a\cdot b$, 且要求集合中任意元素 $a$ 有加法逆元 $-a$，对所有非零元素 $b$ 有乘法逆元 $b^{-1}$ ，这种性质让我们可以用以下方法来定义加法和乘法的”反运算”，减法： $a-b$ 和除法 $a/b$<br>$a-b=a+(-b)$<br>$a/b=a\cdot b^{-1}$<br>在抽象代数中，域（Field）是一种可进行加、减、乘和除（除了除以零之外，“零”即加法单位元）运算的代数结构。域的概念是数域以及四则运算的推广。<br>域是环的一种。域和一般的环的区别在于域要求它的元素（除零元之外）可以进行<strong>除法</strong>运算，这等于说每个非零的元素都要有乘法逆元。域中的运算关于乘法是可交换的。若乘法运算没有要求可交换则称为除环，division ring或skew field。  </p><h2 id="域的定义一"><a href="#域的定义一" class="headerlink" title="域的定义一"></a>域的定义一</h2><p>域是交换性除环。  </p><h2 id="域的定义二"><a href="#域的定义二" class="headerlink" title="域的定义二"></a>域的定义二</h2><p>域是一种交换环$(F, +, *)$，当中加法单位元$0$不等于乘法单位元$1$，且所有非零元素有乘法逆元。  </p><h2 id="域的定义三"><a href="#域的定义三" class="headerlink" title="域的定义三"></a>域的定义三</h2><p>域是个集合 $F$ 且带有加法和乘法两种运算，这里“运算”可以想成是种映射，对任意两元素 $a,b\in F$ ，这映射将此两元素对应到某元素，且这些运算满足如下性质：  </p><ul><li>封闭性：   <ul><li>在加法运算上封闭，对所有属于$F$的 $a, b$， $a+b$属于$F$  </li><li>在乘法运算上封闭，对所有属于$F$的 $a, b$， $a*b$属于$F$  </li></ul></li><li>结合律：  <ul><li>加法有结合律，对所有属于$F$的 $a, b, c$， $(a+b)+c=a+(b+c)$  </li><li>乘法有结合律，对所有属于$F$的 $a, b, c$， $(a*b)*c=a*(b*c)$  </li></ul></li><li>单位元：  <ul><li>加法单位元，在$F$中有元素$0$，使得所有 $a \in F$，$a+0=a$  </li><li>乘法单位元，在$F$中有元素$1$，使得所有 $a \in F$，$a*1=a$  </li></ul></li><li>加法单位元$0$不等于乘法单位元$1$  </li><li>逆元：  <ul><li>加法逆元，对所有属于$F$的 $a$，存在 $-a$ 使得 $a+(-a)=0$  </li><li>乘法逆元，对所有属于$F$的 $a$ 且 $a \ne 0$，存在 $a^{-1}$ 使得 $a*a^{-1}=1$  </li></ul></li><li>交换律：  <ul><li>加法交换律，对所有属于$F$的 $a, b$， $a+b=b+a$  </li><li>乘法交换律，对所有属于$F$的 $a, b$， $a*b=b*a$  </li></ul></li><li>分配律：  <ul><li>对所有属于$F$的 $a, b, c$，有$a·(b + c) = (a·b) + (a·c)$  </li><li>对所有属于$F$的 $a, b, c$，有$(a + b)·c = (a·c) + (b·c)$  </li></ul></li></ul><p>其中$0 \ne 1$的要求排除了平凡的只由一个元素组成的域。<br>由以上性质可以得出一些最基本的推论：<br>$−(a * b) =(−a)* b = a *(−b)$<br>$a * 0 = 0$<br>如果$a * b = 0$，则要么$a = 0$，要么$b = 0$<br>域在环的基础上限制更加严格了一些。  </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近总是碰到群环域这些东西，抽空学习了一下，写篇博客加深印象。本文综合各种博客，百科写成。本人不是学数学出身。本文只是自己的理解。&lt;/p&gt;
    
    </summary>
    
      <category term="数学" scheme="http://yunhao.space/categories/%E6%95%B0%E5%AD%A6/"/>
    
      <category term="代数" scheme="http://yunhao.space/categories/%E6%95%B0%E5%AD%A6/%E4%BB%A3%E6%95%B0/"/>
    
    
      <category term="数学" scheme="http://yunhao.space/tags/%E6%95%B0%E5%AD%A6/"/>
    
      <category term="代数" scheme="http://yunhao.space/tags/%E4%BB%A3%E6%95%B0/"/>
    
      <category term="群论" scheme="http://yunhao.space/tags/%E7%BE%A4%E8%AE%BA/"/>
    
      <category term="环论" scheme="http://yunhao.space/tags/%E7%8E%AF%E8%AE%BA/"/>
    
      <category term="域论" scheme="http://yunhao.space/tags/%E5%9F%9F%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>ACM CodeForces 1006 B 题解 贪心</title>
    <link href="http://yunhao.space/2018/07/24/acm-cf-1006b-greedy/"/>
    <id>http://yunhao.space/2018/07/24/acm-cf-1006b-greedy/</id>
    <published>2018-07-24T10:47:59.000Z</published>
    <updated>2019-01-23T05:03:13.357Z</updated>
    
    <content type="html"><![CDATA[<p>这是一道简单的贪心，在输入的时候记录下前k个最大数。然后在顺序扫一遍序列，将这k个数找出来。每找到一个，就立即划分一组，找到最后一个时，如果后边还有没遍历完的。那么就将剩下的数并到最后一组。  </p><a id="more"></a><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>B. Polycarp’s Practice  </p><h1 id="限制"><a href="#限制" class="headerlink" title="限制"></a>限制</h1><p>time limit per test: 2 seconds<br>memory limit per test: 256 megabytes<br>input: standard input<br>output: standard output  </p><h1 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h1><p>Polycarp is practicing his problem solving skill. He has a list of $n$ problems with difficulties $a_1,a_2,…,a_n$, respectively. His plan is to practice for exactly $k$ days. Each day he has to solve at least one problem from his list. Polycarp solves the problems in the order they are given in his list, he cannot skip any problem from his list. He has to solve all $n$ problems in exactly $k$ days.<br>Thus, each day Polycarp solves a contiguous sequence of (consecutive) problems from the start of the list. He can’t skip problems or solve them multiple times. As a result, in $k$ days he will solve all the $n$ problems.<br>The profit of the $j^{th}$ day of Polycarp’s practice is the maximum among all the difficulties of problems Polycarp solves during the $j^{th}$ day (i.e. if he solves problems with indices from $l$ to $r$ during a day, then the profit of the day is $max_{l \le i \le r} a_i$). The total profit of his practice is the sum of the profits over all $k$ days of his practice.<br>You want to help Polycarp to get the maximum possible total profit over all valid ways to solve problems. Your task is to distribute all $n$problems between $k$ days satisfying the conditions above in such a way, that the total profit is maximum.<br>For example, if $n=8,k=3$ and $a=[5,4,2,6,5,1,9,2]$, one of the possible distributions with maximum total profit is: $[5,4,2],[6,5],[1,9,2]$. Here the total profit equals $5+6+9=20$.  </p><h1 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h1><p>The first line of the input contains two integers $n$ and $k$ $(1 \le k \le n \le 2000)$ — the number of problems and the number of days, respectively.<br>The second line of the input contains $n$ integers $a_1,a_2,…,a_n$ $(1 \le a_i \le 2000)$ — difficulties of problems in Polycarp’s list, in the order they are placed in the list (i.e. in the order Polycarp will solve them).  </p><h1 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h1><p>In the first line of the output print the maximum possible total profit.<br>In the second line print exactly $k$ positive integers $t_1,t_2,…,t_k$ ($t_1+t_2+⋯+t_k$ must equal $n$), where $t_j$ means the number of problems Polycarp will solve during the $j^{th}$ day in order to achieve the maximum possible total profit of his practice.<br>If there are many possible answers, you may print any of them.  </p><h1 id="样本"><a href="#样本" class="headerlink" title="样本"></a>样本</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">8 3</span><br><span class="line">5 4 2 6 5 1 9 2</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">20</span><br><span class="line">3 2 3</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">5 1</span><br><span class="line">1 1 1 1 1</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">5</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">4 2</span><br><span class="line">1 2000 2000 2</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">4000</span><br><span class="line">2 2</span><br></pre></td></tr></table></figure><h1 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h1><p>The first example is described in the problem statement.<br>In the second example there is only one possible distribution.<br>In the third example the best answer is to distribute problems in the following way: $[1,2000],[2000,2]$. The total profit of this distribution is $2000+2000=4000$.  </p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>这是一道简单的贪心，在输入的时候记录下前k个最大数。然后在顺序扫一遍序列，将这k个数找出来。每找到一个，就立即划分一组，找到最后一个时，如果后边还有没遍历完的。那么就将剩下的数并到最后一组。<br>简单说下代码，cnt[i]最开始表示i这个数在序列中出现了几次。第21-36行，minval存的是前k个最大数中最小的那个数。然后这个时候，ret就跟着计算出来了。并且这个时候cnt数组的含义就变了。cnt<a href="i&gt;=minval">i</a>含义是i这个数还剩几个没找到。这个找没找到是用在后边划分组用的。res数组是用来存储各组的数的个数的。  </p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, k;</span><br><span class="line"><span class="keyword">int</span> num[<span class="number">2010</span>];</span><br><span class="line"><span class="keyword">int</span> cnt[<span class="number">2010</span>];</span><br><span class="line"><span class="keyword">int</span> res[<span class="number">2010</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;k);</span><br><span class="line">    <span class="built_in">memset</span>(cnt, <span class="number">0</span>, <span class="keyword">sizeof</span> cnt);</span><br><span class="line">    <span class="built_in">memset</span>(res, <span class="number">0</span>, <span class="keyword">sizeof</span> res);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;num[i]);</span><br><span class="line">        cnt[num[i]]++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> minval = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> tmp = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> cur = <span class="number">2000</span>;</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(tmp &lt; k)&#123;</span><br><span class="line">        <span class="keyword">while</span>(!cnt[cur])</span><br><span class="line">            cur--;</span><br><span class="line">        tmp += cnt[cur];</span><br><span class="line">        <span class="keyword">if</span>(tmp &gt;= k)&#123;</span><br><span class="line">            cnt[cur] -= tmp-k;</span><br><span class="line">            minval = cur;</span><br><span class="line">        &#125;</span><br><span class="line">        ret += cur*cnt[cur];</span><br><span class="line">        cur--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ret);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> rescur = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(num[i] &gt;= minval &amp;&amp; cnt[num[i]])&#123;</span><br><span class="line">            cnt[num[i]]--;</span><br><span class="line">            res[rescur]++;</span><br><span class="line">            <span class="keyword">if</span>(rescur &lt; k<span class="number">-1</span>)</span><br><span class="line">                rescur++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            res[rescur]++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= rescur; i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>, res[i]);</span><br><span class="line">        i == rescur ? <span class="built_in">printf</span>(<span class="string">"\n"</span>) : <span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是一道简单的贪心，在输入的时候记录下前k个最大数。然后在顺序扫一遍序列，将这k个数找出来。每找到一个，就立即划分一组，找到最后一个时，如果后边还有没遍历完的。那么就将剩下的数并到最后一组。  &lt;/p&gt;
    
    </summary>
    
      <category term="ACM" scheme="http://yunhao.space/categories/ACM/"/>
    
      <category term="贪心" scheme="http://yunhao.space/categories/ACM/%E8%B4%AA%E5%BF%83/"/>
    
    
      <category term="ACM" scheme="http://yunhao.space/tags/ACM/"/>
    
      <category term="贪心" scheme="http://yunhao.space/tags/%E8%B4%AA%E5%BF%83/"/>
    
      <category term="CodeForces" scheme="http://yunhao.space/tags/CodeForces/"/>
    
  </entry>
  
  <entry>
    <title>Hexo博客 GitHub仓库图床</title>
    <link href="http://yunhao.space/2018/07/18/hexo-blog-github-images-repository/"/>
    <id>http://yunhao.space/2018/07/18/hexo-blog-github-images-repository/</id>
    <published>2018-07-18T11:06:52.000Z</published>
    <updated>2019-01-23T05:03:13.357Z</updated>
    
    <content type="html"><![CDATA[<p>随着博客的写作，其实我们比较担心的问题就是GitHub对于单个项目来说的大小是有一定限制的。而写博客中有免不了放图片。图片这种东西真是非常的占地方。网上都说用七牛云、微博、或者是什么座图床。我看了看，好像是挺麻烦的。又得注册账号，又得导出外链的。我发现github有一个图片预览的功能。于是我想到了用github这个图片预览的功能做一个图床。创造一个仓库专门存图片，如果这个仓库存满了，再创建一个仓库就好了。每个仓库能存1G的东西，所以觉得还不错。下面说一下我的思路。  </p><a id="more"></a><h1 id="原项目结构"><a href="#原项目结构" class="headerlink" title="原项目结构"></a>原项目结构</h1><p>原来的项目结构是在<code>博客的项目目录</code>下的source文件夹下新建一个叫images的文件夹，文件夹下存图片。即<code>博客目录/source/images</code><br>可能有好多人最开始都跟我差不多的结构。我就是从这个结构开始改的。  </p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>这个就是GitHub图片预览的url<code>https://raw.githubusercontent.com/lmnsyunhao/blog-pica/master/acm-cf-963b-dfs/normal.png</code>，考虑到这个url太长，而且考虑到如果github之后更改这个url，那么很有可能所有的博文的图片链接都要修改。<br>我有了这样一个思路，我的图片链接先请求到我自己的服务器上，然后服务器重写url，301重定向到github。这样如果某一天github这个图片预览的url格式变了的话，直接改服务器那边的重写规则就好了。甚至如果以后不支持图片预览的话，也能再做打算。不用修改博文。<br>当然，如果你们懒得用服务器重定向了的话，直接把博文中的图片改成类似上边的那种url也行。<br>OK，开搞。  </p><h1 id="建立图片仓库"><a href="#建立图片仓库" class="headerlink" title="建立图片仓库"></a>建立图片仓库</h1><p>GitHub新建仓库<code>blog-pica</code>，如果这个仓库满了，我的下一个仓库名字就是<code>blog-picb</code>，我是这样定义的。<br>然后我在本地的博客项目下新建images文件夹，即<code>博客目录/images</code>。因为如果放到source文件夹下，在<code>hexo g</code>时候会在<code>博客目录/public</code>文件夹下生成对应的images文件夹，这样的话<code>hexo d</code>的时候还是会将图片上传。即，保证了图片不会在博客仓库出现<br>然后我修改<code>博客目录/.gitignore</code>文件，添加一行，内容是<code>/images/</code>，这样的话，就会将此文件夹忽略掉。从而保证图片只在图床仓库出现，不会在备份仓库出现。<br>然后将之前的那些图片拷贝到<code>博客目录/images</code>文件夹下，然后执行下面操作：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;images upload&quot;</span><br><span class="line">git remote add origin git@github.com:lmnsyunhao/blog-pica.git</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure></p><p><code>博客目录/images</code>这个位置只是我放图片仓库的位置，或者说你们想放哪儿放哪儿，不一定要放在博客项目内。因为现在这个图片仓库和博客项目已经没关系了。<br>现在图片仓库已经建立好了，而且图片也已经上传到GitHub上了。  </p><h1 id="添加DNS解析"><a href="#添加DNS解析" class="headerlink" title="添加DNS解析"></a>添加DNS解析</h1><p>如果你没有域名的话，那么不用添加解析。继续看下一节。<br>我是在腾讯云托管的我的域名解析。所以去腾讯云添加一个解析记录。A类型记录，images.yunhao.space解析到自己的服务器IP地址。<br>如果不会添加解析，<a href="/2018/07/01/domain-name-parsing-setting-tutor/">域名解析配置教程</a>  </p><h1 id="修改博文图片地址"><a href="#修改博文图片地址" class="headerlink" title="修改博文图片地址"></a>修改博文图片地址</h1><p>这个比较简单，用Notepad++或者是sublime什么的，文件夹内搜索，比如搜<code>](/images/</code>这个，然后全部替换一下。具体怎么搜索，我就不管了。<br>反正就是做如下替换。将<code>[图](/images/folder/1.png)</code>替换成<code>[图](https://images.yunhao.space/pica/folder/1.png</code><br>如果没有域名的话，那么那个images.yunhao.space就要替换成你的服务器ip地址了。  </p><h1 id="配置nginx重写"><a href="#配置nginx重写" class="headerlink" title="配置nginx重写"></a>配置nginx重写</h1><p>我的服务器是Ubuntu16.04 Nginx。去自己的服务器上。进行如下操作：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /etc/nginx/sites-available</span><br><span class="line">vim 301.yunhao.space.images.conf</span><br></pre></td></tr></table></figure></p><p>然后输入如下内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">server_name images.yunhao.space;</span><br><span class="line">    location ~ \.png$ &#123;</span><br><span class="line">        rewrite ^/(pic[a-z])/(.*)$ http://raw.githubusercontent.com/lmnsyunhao/blog-$1/master/$2 permanent;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>保存退出vim，然后执行下面命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd ../sites-enabled</span><br><span class="line">ln -s /etc/nginx/sites-available/301.yunhao.space.images.conf images-redirection</span><br><span class="line">systemctl restart nginx.service</span><br></pre></td></tr></table></figure></p><p>这个时候应该就ok了。然后每次的时候，需要提前把图片push到仓库中才行。  </p><h1 id="仓库满了"><a href="#仓库满了" class="headerlink" title="仓库满了"></a>仓库满了</h1><p>如果某一天仓库满了的话，那么就在github上新建一个仓库<code>blog-picb</code>，然后将那个images文件夹删除，因为这个仓库满了，所以就把本地的删了，反正远程的也不收影响。然后再在同样的位置新建一个images的仓库，连上<code>blog-picb</code>这个新的仓库，然后继续往里面存图片就好了。<br>当然之后写作的时候博文中图片的url就要换成blog-picb了。  </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;随着博客的写作，其实我们比较担心的问题就是GitHub对于单个项目来说的大小是有一定限制的。而写博客中有免不了放图片。图片这种东西真是非常的占地方。网上都说用七牛云、微博、或者是什么座图床。我看了看，好像是挺麻烦的。又得注册账号，又得导出外链的。我发现github有一个图片预览的功能。于是我想到了用github这个图片预览的功能做一个图床。创造一个仓库专门存图片，如果这个仓库存满了，再创建一个仓库就好了。每个仓库能存1G的东西，所以觉得还不错。下面说一下我的思路。  &lt;/p&gt;
    
    </summary>
    
      <category term="Hexo" scheme="http://yunhao.space/categories/Hexo/"/>
    
    
      <category term="GitHub" scheme="http://yunhao.space/tags/GitHub/"/>
    
      <category term="Hexo" scheme="http://yunhao.space/tags/Hexo/"/>
    
      <category term="Nginx" scheme="http://yunhao.space/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Git Submodule 特性详解</title>
    <link href="http://yunhao.space/2018/07/18/git-submodule-learning-note/"/>
    <id>http://yunhao.space/2018/07/18/git-submodule-learning-note/</id>
    <published>2018-07-18T10:55:15.000Z</published>
    <updated>2019-01-23T05:03:13.357Z</updated>
    
    <content type="html"><![CDATA[<p>今天在搞博客的时候，遇到了嵌套git项目的问题，之前一直没多想。然后今天遇到了问题，在这里总结一下git如何优雅的处理嵌套项目。即git的submodule特性是什么。  </p><a id="more"></a><h1 id="submodule介绍"><a href="#submodule介绍" class="headerlink" title="submodule介绍"></a>submodule介绍</h1><p>当一个git项目a中嵌套了另一个git项目b，而且b没有被a的.gitignore文件忽略掉。这种情况下就会用到submodule这个特性了。在使用git命令的时候，git会检查当前项目内是否含有另一个需要监控的git项目，如果有就会弹出一个提示，提示应该用submodule来解决这种情况。<br>为什么呢？试想一下，如果不用这种特性的话，那么每个a的commit中都会有一个b的所有的commit树。也就是成了树套树。空间复杂度就瞬间变成O(n*n)了。所以用submodule这个特性可以避免这种情况的发生。<br>submodule在项目a中存储一个指向项目b的某次提交的commit id，在存储一些b的仓库地址等配置信息，以这种方式将b集成进来。避免了树套树的问题。<br>接下来，我们在GitHub上面使用两个仓库来进行学习，主项目main，子模块sub。  </p><h1 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h1><p>现在假设，我们需要把<code>当前GitHub上的最新版本的sub</code>作为项目main的一个子模块加入。<br>PS：如果你的子项目已经在主项目里了，而且并没有用submodule特性。(这种情况是可能出现的)。可以先切换到子项目根目录下，然后提交所有更改，push到远程。然后在主项目中删除子项目。然后继续进行下述操作。<br>在主项目目录下执行命令，执行这个命令的时候子项目的远程仓库最好不是空的，不然好像.gitmodules中不会添加对应的内容。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git submodule add git@github.com:lmnsyunhao/sub.git sub</span><br></pre></td></tr></table></figure></p><p>执行这个命令之后主目录下就会多出一些文件，.gitmodules和sub文件夹。sub文件夹下就是成功引入的子模块的内容。<br>我们执行<code>git status</code>能够看到有两个文件已经添加到暂存区，准备提交。sub文件夹被当做一个文件进行提交。<br>这个时候就创建好了，然后commit和push一下父项目<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &quot;add submodule&quot;</span><br><span class="line">git push</span><br></pre></td></tr></table></figure></p><p>然后我们到GitHub上可以看到子项目后边带了一个<code>@</code>，@后边的就是子项目的commit id，当前父项目的<code>commit id</code>所对应的子项目的<code>commit id</code>  </p><h1 id="修改子项目"><a href="#修改子项目" class="headerlink" title="修改子项目"></a>修改子项目</h1><p>首先，我们需要能对子项目进行commit。<br>进入子项目的目录，然后向正常的操作一样，add，然后commit，然后push。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd sub</span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;modified something&quot;</span><br><span class="line">git push</span><br></pre></td></tr></table></figure></p><p>修改完子项目之后，我们回到父项目的目录，会发现父项目中提示子项目有心的commit id。我们需要把父项目在提交一下，也就是将父项目中的sub文件指向最新的commit id。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd ..</span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;update sub&quot;</span><br><span class="line">git push</span><br></pre></td></tr></table></figure></p><h1 id="更新项目"><a href="#更新项目" class="headerlink" title="更新项目"></a>更新项目</h1><p>我们在main项目中执行操作：<code>&lt;commit id&gt;</code>是main的远程仓库最新的一次提交中对应的sub的commit id。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd main</span><br><span class="line">git pull</span><br><span class="line">git submodule update</span><br><span class="line">cd sub</span><br><span class="line">git merge &lt;commit id&gt; master</span><br></pre></td></tr></table></figure></p><p>现在，main项目和sub项目已经和main的远程仓库一样了。因为sub可能还有commit id领先（可能出现这种情况，请看下边情景）。所以还需要在sub项目中执行下面：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd sub</span><br><span class="line">git pull</span><br></pre></td></tr></table></figure></p><p>这样做是为了及时将sub项目更新到最新。当然如果你永远都不会在main项目中修改sub项目的文件的话。那么不进行git pull也是可以的。<br>上面是对sub子项目更新到最新，如果你还有很多子项目，想要将所有的子项目更新到最新的话。可以执行下面操作：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git submodule foreach git pull</span><br></pre></td></tr></table></figure></p><p>试想下面情景：<br>假设sub是main的子项目，现在有3个人，1在开发main，2也在开发main，3在开发sub。1，2有权修改main和sub，3只有权修改sub。  </p><ul><li>1先修改main和sub，main的commit id是main_a，sub的commit id是sub_a。然后push并离开了。  </li><li>2在1的基础上继续修改，在main_a的基础上修改main，commit id是main_b，在sub_a的基础上修改sub，commit_id是sub_b。  </li><li>3在2的基础上修改sub，在sub_b的基础上修改sub，commit id是sub_c。  </li><li>然后1回来了。他应该先在主项目下git pull，然后发现sub项目有新的提交。然后在主目录执行git submodule update，这个时候，cd到sub中，我们可以看到分支切换到了sub_b这个commit上。也就是说git submodule update只是切换分支，如果这个时候想继续对sub修改的话，首先，我们需要手动merge，执行git merge sub_b master，将sub_b分支merge到主分支上。然后现在这个状态就和main项目的最新状态是一样的了。但是我们知道sub项目还有个commit id，sub_c，我们需要及时对这个sub_c做个处理，否则的话，如果直接修改sub项目，提交的话，容易出现冲突。即，git pull一下，将sub_c更新过来。  </li></ul><p>从上面的例子我们看到了git submodule update与直接在子项目里面git pull是有一些区别的。直接在子项目中执行git pull的话，那么就是一下子就更新到了sub_c这个commit id了。而git submodule update则是更新到main项目中最后一次提交时sub项目对应的commit id。  </p><h1 id="克隆父项目"><a href="#克隆父项目" class="headerlink" title="克隆父项目"></a>克隆父项目</h1><p>方法一：父项目和子项目一起克隆下来<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.com:lmnsyunhao/main.git --recursive</span><br></pre></td></tr></table></figure></p><p>方法二：先克隆父项目，然后再克隆子项目<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.com:lmnsyunhao/main.git</span><br><span class="line">cd main</span><br><span class="line">git submodule init</span><br><span class="line">git submodule update</span><br></pre></td></tr></table></figure></p><p>上边的情景已经展示了<code>git submodule update</code>的性质了。即默认切换到对应的commit id，如果你需要修改子项目的话，还需要将commit id手动merge到master才能更改。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge &lt;commit id&gt; master</span><br></pre></td></tr></table></figure></p><p>几个月之后，我发现其实<strong>大部分情况</strong>，好像直接checkout分支就好了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout master</span><br></pre></td></tr></table></figure></p><h1 id="删除子项目"><a href="#删除子项目" class="headerlink" title="删除子项目"></a>删除子项目</h1><p>不支持命令删除子项目，需要手动删除。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd main</span><br><span class="line">git rm --cached sub</span><br><span class="line">rm -rf sub</span><br></pre></td></tr></table></figure></p><p>移除.gitmodules文件中对应的部分<br>移除.git/config文件中对应的部分<br>移除.git/modules文件夹下对应的文件夹  </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天在搞博客的时候，遇到了嵌套git项目的问题，之前一直没多想。然后今天遇到了问题，在这里总结一下git如何优雅的处理嵌套项目。即git的submodule特性是什么。  &lt;/p&gt;
    
    </summary>
    
      <category term="Git" scheme="http://yunhao.space/categories/Git/"/>
    
    
      <category term="Git" scheme="http://yunhao.space/tags/Git/"/>
    
      <category term="GitHub" scheme="http://yunhao.space/tags/GitHub/"/>
    
  </entry>
  
  <entry>
    <title>U启动 制作WinPE启动盘 支持UEFI启动</title>
    <link href="http://yunhao.space/2018/07/13/burn-windows-preinstallation-environment-disk/"/>
    <id>http://yunhao.space/2018/07/13/burn-windows-preinstallation-environment-disk/</id>
    <published>2018-07-13T15:05:21.000Z</published>
    <updated>2019-01-23T05:03:13.357Z</updated>
    
    <content type="html"><![CDATA[<p>WinPE又叫Windows Preinstallation Environment，这个PE其实就是一个安装在U盘中的小的windows系统，里面有一些非常基础实用的功能，这个PE可以解决一些磁盘损坏、启动项丢失等与系统有关的问题。所以今天就来看看如何来制作WinPE盘。制作WinPE有好多，比如大白菜，老毛桃，大番薯等。唉，真的烦，怎么都是吃的？而且一个个起名字还这么难听。终于我找着了一个好听的，也非常好用。叫U启动，本文说如何刻录U启动WinPE盘，并且支持UEFI启动。  </p><a id="more"></a><h1 id="PE"><a href="#PE" class="headerlink" title="PE"></a>PE</h1><p>Preinstallation Environment，能够管理启动项；能够再你windows系统坏的时候将你的文件备份出来；能够做最基本的磁盘管理等等。他的功能非常的多。所以，装系统的时候免不了使用PE。  </p><h1 id="U启动"><a href="#U启动" class="headerlink" title="U启动"></a>U启动</h1><p>安装过程很简单。打开官网，<a href="http://www.uqdown.cn/" target="_blank" rel="noopener">U启动官网</a>，然后点击下载UEFI版。如下图：<br><img src="https://images.yunhao.space/pica/burn-windows-preinstallation-environment-disk/1.png" alt="U启动官网"><br>下载了之后，打开下载的exe，然后安装U启动。如下图：<br><img src="https://images.yunhao.space/pica/burn-windows-preinstallation-environment-disk/2.png" alt="安装"><br>安装完成之后，打开U启动，然后插入U盘，U盘的质量不要太差，要不然刻录出的盘容易出问题。如下图，选中你要制作的U盘，然后其余都是默认，点击开始制作<br><img src="https://images.yunhao.space/pica/burn-windows-preinstallation-environment-disk/3.png" alt="制作"><br>然后应该会提示会清空U盘的所有数据，点击确定。<br><img src="https://images.yunhao.space/pica/burn-windows-preinstallation-environment-disk/4.png" alt="清除U盘"><br>等待制作完成<br><img src="https://images.yunhao.space/pica/burn-windows-preinstallation-environment-disk/5.png" alt="正在制作"><br>完成后会询问是否模拟启动，这个模拟启动没什么用处，就是检测这个是否刻录成功，一般都是成功的，就不用模拟启动了，选择否。<br><img src="https://images.yunhao.space/pica/burn-windows-preinstallation-environment-disk/6.png" alt="模拟启动"><br>然后U启动 WinPE，就制作好了。这个U盘支持UEFI启动，当然Legacy也同样支持。  </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;WinPE又叫Windows Preinstallation Environment，这个PE其实就是一个安装在U盘中的小的windows系统，里面有一些非常基础实用的功能，这个PE可以解决一些磁盘损坏、启动项丢失等与系统有关的问题。所以今天就来看看如何来制作WinPE盘。制作WinPE有好多，比如大白菜，老毛桃，大番薯等。唉，真的烦，怎么都是吃的？而且一个个起名字还这么难听。终于我找着了一个好听的，也非常好用。叫U启动，本文说如何刻录U启动WinPE盘，并且支持UEFI启动。  &lt;/p&gt;
    
    </summary>
    
      <category term="系统安装" scheme="http://yunhao.space/categories/%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/"/>
    
    
      <category term="系统安装" scheme="http://yunhao.space/tags/%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/"/>
    
      <category term="U启动" scheme="http://yunhao.space/tags/U%E5%90%AF%E5%8A%A8/"/>
    
      <category term="WinPE" scheme="http://yunhao.space/tags/WinPE/"/>
    
      <category term="UEFI" scheme="http://yunhao.space/tags/UEFI/"/>
    
  </entry>
  
  <entry>
    <title>Windows10 磁盘管理工具 分区管理 创建分区</title>
    <link href="http://yunhao.space/2018/07/13/windows-disk-manager-partition/"/>
    <id>http://yunhao.space/2018/07/13/windows-disk-manager-partition/</id>
    <published>2018-07-13T14:08:18.000Z</published>
    <updated>2019-01-23T05:03:13.361Z</updated>
    
    <content type="html"><![CDATA[<p>本文讲如何用windows10自带的磁盘管理工具进行分区管理。装系统之后一般都需要进行这种操作。安装双系统等可能也需要用到这个东西，所以再这里就单拿出来说一下。  </p><a id="more"></a><h1 id="创建分区"><a href="#创建分区" class="headerlink" title="创建分区"></a>创建分区</h1><p>首先打开磁盘管理，右键单击屏幕左下角windows徽。然后点击磁盘管理。如下：<br><img src="https://images.yunhao.space/pica/windows-disk-manager-partition/1.png" alt="打开磁盘管理"><br>然后点击需要分配的空间，即显示未分配的部分，然后右键单击，弹出框中点击新建简单卷。如下：<br><img src="https://images.yunhao.space/pica/windows-disk-manager-partition/2.png" alt="右键点击"><br>然后出现对话框，点击下一步：如图：<br><img src="https://images.yunhao.space/pica/windows-disk-manager-partition/3.png" alt="下一步"><br>然后填写新建的分区的大小。1G=1024M，如下图：点击下一步<br><img src="https://images.yunhao.space/pica/windows-disk-manager-partition/4.png" alt="划分大小"><br>然后给磁盘分配驱动器号。这个驱动器号分配了之后，不要乱改了。不然容易出现应用程序找不到，打不开的情况。点击下一步<br><img src="https://images.yunhao.space/pica/windows-disk-manager-partition/5.png" alt="分配驱动器号"><br>文件系统，一般都是NTFS，然后卷标这是是自己起的名字，如果不喜欢可以改。分配好之后，随时都可以改的。不会游应用程序找不到啊，这种情况。点击下一步<br><img src="https://images.yunhao.space/pica/windows-disk-manager-partition/6.png" alt="卷标"><br>然后出现这个界面，确认之后，点击完成。<br><img src="https://images.yunhao.space/pica/windows-disk-manager-partition/7.png" alt="完成"><br>稍等一会儿，等格式化完成之后就创建完成了。  </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文讲如何用windows10自带的磁盘管理工具进行分区管理。装系统之后一般都需要进行这种操作。安装双系统等可能也需要用到这个东西，所以再这里就单拿出来说一下。  &lt;/p&gt;
    
    </summary>
    
      <category term="系统安装" scheme="http://yunhao.space/categories/%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/"/>
    
    
      <category term="Windows" scheme="http://yunhao.space/tags/Windows/"/>
    
      <category term="磁盘管理" scheme="http://yunhao.space/tags/%E7%A3%81%E7%9B%98%E7%AE%A1%E7%90%86/"/>
    
      <category term="分区" scheme="http://yunhao.space/tags/%E5%88%86%E5%8C%BA/"/>
    
  </entry>
  
  <entry>
    <title>Windows10 系统安装教程 UEFI模式 Legacy模式</title>
    <link href="http://yunhao.space/2018/07/13/windows-system-installation-tutor/"/>
    <id>http://yunhao.space/2018/07/13/windows-system-installation-tutor/</id>
    <published>2018-07-13T11:15:52.000Z</published>
    <updated>2019-01-23T05:03:13.361Z</updated>
    
    <content type="html"><![CDATA[<p>更换了SSD需要装windows系统？Windows10出问题了怎么办？总是蓝屏，重启电脑也解决不了，这种时候多半是系统某些地方坏了。如果自己不能够排查出来的话，就用某弛一句话，重装系统多半能解决问题。那么如何重装windows10呢？上维修点让别人给装？还得花不少钱，还不如自己装。本文教你如何装windows10系统。  </p><a id="more"></a><h1 id="章节概述"><a href="#章节概述" class="headerlink" title="章节概述"></a>章节概述</h1><p>如果不懂UEFI和Legacy的话，那么看设置UEFI模式、设置SATA Mode、安装Windows系统几节就OK。<br>如果想要了解Legacy安装windows10的话，那么请看UEFI与Legacy区别，设置Legacy模式，安装windows系统几节。  </p><h1 id="设置UEFI模式"><a href="#设置UEFI模式" class="headerlink" title="设置UEFI模式"></a>设置UEFI模式</h1><p>如果你不懂UEFI和Legacy的话，那么就选用UEFI模式安装就好了。现在的电脑都支持UEFI，除非你的电脑很老很老。<br>本文选用电脑Lenovo-Y50-70做为例子，其他的电脑装机都是大同小异，如果你不是这个电脑的话，也不要慌，本文会针对一般的电脑进行说明。<br>首先需要准备windows系统盘一个，如何刻录系统盘？<a href="/2018/07/11/burn-windows-installation-disk/">刻录 Windows10 系统盘 UltraISO刻录法 与 官方工具法</a><br>首先要百度你的电脑的BIOS如何进入，还有选择启动项界面如何进入。BIOS一般都是F2，选择启动项一般都是F12。对于不同的电脑，可能有的是按Fn+F2，Fn+F12，或是ESC，Enter键等等。这些请自行百度。具体电脑可能会有所不同。<br>确保你的电脑正常关闭，并完成了备份。<br>开机，狂按F2(或者是你查到的进入BIOS的按键)，进入BIOS。如果怎么也进入不了BIOS？<a href="/2018/05/23/windows-pc-cannot-select-boot-device/">Windows10 PC 无法进入选择启动项界面 无法进入BIOS界面</a><br>下面就是进入了BIOS，电脑的BIOS一般都不一样。有的可能是这种底色的，还有的是别的底色的，还有更高级的BIOS等等。不过他们有的功能是类似的。界面上会有提示告诉你怎么移动菜单。找到如下这种<code>Boot Mode</code>类似的可以选择启动模式的地方，选项是UEFI、Lagacy等。然后选择UEFI模式，如果没有这种<code>Boot Mode</code>类似的，那么就找什么UEFI Enable，UEFI Mode，Launch CSM什么之类的，然后把UEFI打开。<br><img src="https://images.yunhao.space/pica/windows-system-installation-tutor/1.png" alt="BIOS"></p><h1 id="设置SATA-Mode"><a href="#设置SATA-Mode" class="headerlink" title="设置SATA Mode"></a>设置SATA Mode</h1><p>找到SATA Mode这个东西，选项一般有AHCI、RAID、Compatible等。<br><img src="https://images.yunhao.space/pica/windows-system-installation-tutor/20.png" alt="SATA Mode"><br>从图中右侧可以看到，一共有两种，一种是AHCI模式，一种是Compatible模式，Compatible模式中又叫IDE模式。实际上还有一种模式是RAID模式。<br>这三种模式都是什么呢？来分别介绍一下。  </p><ul><li>IDE Mode就是让硬盘模拟老式的接口方式运行，这样可以对Windows XP兼容。  </li><li>AHCI Mode是Serial ATA Advanced Host Controller Interface，串行ATA高级主控接口。这个模式能够稍微提高硬盘的性能。  </li><li>RAID Mode是Redundant Array of Independent Disk，独立磁盘冗余阵列。学过操作系统的同学都知道这是个啥。最少两块硬盘才能组建RAID。  </li></ul><p>装Windows10的时候，SATA Mode要设置为AHCI就行。<br>有些工作站默认的SATA Mode设置为RAID，这样可能会出现Windows10安装完毕之后，容易导致进系统找不到引导，或是经常蓝屏什么的。我猜测是因为Windows10没有默认集成RAID的驱动程序。所以我在此强调一下。<br>注意！！！如果已经成功安装了Windows10不要贸然更改这些设置。否则，系统容易崩。<br>之后，保存设置并退出，这个也一般会有提示的，比如上图中，右下角，F10是保存并退出，如果没找到这种，找到Exit菜单，然后看看类似Exit and Save，Exit Saving Changes等等就行。<br>保存并退出了BIOS之后，关机。如果能正常关机，就正常关机，如果不能正常关机就强制关机。重装系统过程中有些时候避免不了强制关机几次，不用太担心，硬件没那么脆弱。强制关机就是长按电源键直到关机。  </p><h1 id="安装Windows系统"><a href="#安装Windows系统" class="headerlink" title="安装Windows系统"></a>安装Windows系统</h1><p>插入windows系统盘，选U盘做windows系统盘的时候别选太垃圾的U盘，容易出问题。质量得过得去。插入系统盘之后，开机。然后狂按F12，或者是别的能够进入选择启动项界面的按键。<br>下面就是选择启动项界面，这个界面如果不相同也很正常，有的更优雅一些。一般这个界面都和BIOS的界面是配套的界面。第一个Windwos Boot Manager这个是我电脑里面现存的Windows的启动选项，后边括号里面那个是硬盘的编号。第二个，EFI USB Device(SanDisk)这个就是我们的系统盘的启动项。如果不一样的话，那么就找这几个关键词，带EFI，USB，然后括号里面的一般是U盘的品牌。然后还有一些别的启动项，比如图上这些，还有的有什么什么LAN等，那些都不是我们需要的。我们选择U盘的启动项，然后Enter进入。<br><img src="https://images.yunhao.space/pica/windows-system-installation-tutor/2.png" alt="选择启动项"><br>然后等一会儿，就会进入到我们的安装系统界面，界面很人性化，根据提示就能安装，我就简要说一下。下面这个界面一般都直接点下一步，默认的都对。点下一步<br><img src="https://images.yunhao.space/pica/windows-system-installation-tutor/3.png" alt="安装程序"><br>然后能看到下面这个界面，点击现在安装。<br><img src="https://images.yunhao.space/pica/windows-system-installation-tutor/4.png" alt="安装程序"><br>等一会儿，如下图：<br><img src="https://images.yunhao.space/pica/windows-system-installation-tutor/5.png" alt="安装程序正在启动"><br>出现下图，点击我没有产品密钥，<br><img src="https://images.yunhao.space/pica/windows-system-installation-tutor/6.png" alt="激活Windows"><br>出现下图，让选择Windows安装版本。开发人员一般的装专业版就行，专业版有组策略，家庭版没有。如果只是用windows办公的话，家庭版就行。家庭单语言版，跟教育版我没用过，不敢尝试。有兴趣大家可以尝试一下。然后点击下一步<br><img src="https://images.yunhao.space/pica/windows-system-installation-tutor/7.png" alt="选择安装的版本"><br>然后点击接受协议，点击下一步。<br><img src="https://images.yunhao.space/pica/windows-system-installation-tutor/8.png" alt="接受协议"><br>然后出现下面，我一般选择自定义，点击自定义<br><img src="https://images.yunhao.space/pica/windows-system-installation-tutor/9.png" alt="自定义"><br>点击自定义，以后会看到这个分区界面。<br>如果你是给电脑新换了SSD，然后重装系统。这个时候应该能看到SSD的盘，从驱动器数量和驱动器的大小可以看出，如果看不到SSD的盘。那么是安装程序不认SSD，这里给出两种方法，第一，关闭电脑，使用PE，将SSD格式化一下。然后再重新装系统。详见本文PE格式化磁盘一节。这种方法我自己试过；第二，网上说找不到SSD驱动器，是因为安装程序里面没有驱动程序，需要将驱动程序下载好，拷贝到U盘中，然后点击图中对话框左下角那个加载驱动程序，将驱动程序加载进来就好了。这种方法我没有试过<br>下边的主分区就分别是C盘，D盘等等。上面的恢复分区是windows存储恢复程序。系统分区是efi分区，存储启动程序的。MSR分区是微软预留分区。<br><img src="https://images.yunhao.space/pica/windows-system-installation-tutor/10.png" alt="分区"><br>现在要删除分区。如果你某个盘里面的东西不想删的话，那么就留着那个分区不删除就好了。反正我觉得，装一次系统挺不容易的，所以我一般所有分区都删除，然后重新分区。所以讲这个表儿里面的所有的都删除，选中某一个分区，然后点击下边儿删除，然后确定删除。全都删除之后，会变成一个<code>未分配的空间</code>。<br><img src="https://images.yunhao.space/pica/windows-system-installation-tutor/11.png" alt="删除分区"><br>这个时候就可以重新分区了，先分C盘，我一般都分120个G以上，因为C盘会越用越小，所以习惯分大一点儿，如果不想太大，最小得60个G吧，要不然就太小了。注意如果磁盘多余一个的话，别分错了磁盘。点击未分配的空间，然后点击新建，然后输入大小，1024M=1G，然后点击应用。<br><img src="https://images.yunhao.space/pica/windows-system-installation-tutor/12.png" alt="分区"><br>这个时候应该会弹框提示，然后点击确定。如下：<br><img src="https://images.yunhao.space/pica/windows-system-installation-tutor/13.png" alt="提示"><br>点击确定之后，等一会儿，会出现下面这样，会自动建立恢复分区，系统分区，和保留分区。<br><img src="https://images.yunhao.space/pica/windows-system-installation-tutor/14.png" alt="分好之后"><br>然后，可以继续按照上面的分区方式，将剩下的未分配空间分配。再继续新建的时候，就不会产生恢复分区，系统分区，保留分区了。这三个只有在没有的时候出现。当然，如果你这个时候不想继续分配的话，也可以安装完系统之后再分配。详见<a href="/2018/07/13/windows-disk-manager-partition/">Windows10 磁盘管理工具 分区管理 创建分区</a><br>等重新分区之后，鼠标点击你想要将系统装入的分区。然后再点下一步，也就是说你需要将C盘选中，然后点击下一步，如下图：<br><img src="https://images.yunhao.space/pica/windows-system-installation-tutor/15.png" alt="选中C盘"><br>然后就开始安装了，等一会儿，如下图：<br><img src="https://images.yunhao.space/pica/windows-system-installation-tutor/16.png" alt="安装中"><br>等安装结束之后会读条，这个时候就要准备拔U盘了，等到读条结束之后，屏幕完全暗下来的一瞬间，拔出U盘，不然就重启了。读条界面如下：<br><img src="https://images.yunhao.space/pica/windows-system-installation-tutor/17.png" alt="读条"><br>然后电脑应该就自动重启了，成功的话，就已经进入windows了，然后进入windows之后会有检查设备，准备啊，然后让你设置用户名什么的，那个就不说了。  </p><h1 id="UEFI与Legacy区别"><a href="#UEFI与Legacy区别" class="headerlink" title="UEFI与Legacy区别"></a>UEFI与Legacy区别</h1><p>UEFI Bios启动模式可以支持两种启动模式，即是Legacy+UEFI启动模式和UEFI启动模式，当中Legacy+UEFI启动模式说的是UEFI和传统BIOS两者共存模式，此种模式还能兼容传统BIOS引导模式以此来启动电脑系统；而UEFI启动模式则只能在UEFI引导模式来启动电脑系统。<br><img src="https://images.yunhao.space/pica/windows-system-installation-tutor/23.png" alt="启动区别"><br>BIOS是英文”Basic Input Output System”的缩略词，直译过来后中文名称就是”基本输入输出系统”。UEFI全称“统一的可扩展固件接口”(Unified Extensible Firmware Interface)，是一种详细描述类型接口的标准。上图是两者启动时候工作的区别，UEFI相比传统BIOS少了自检这一步，所以快了许多。简单的讲，UEFI比传统的BIOS要快，更优秀。现在大多数电脑都支持UEFI了，传统BIOS，即Legacy快被淘汰了。<br>你们可能现在还在混乱，Legacy、Legacy BIOS、UEFI、UEFI BIOS、BIOS、传统BIOS这些到底有几种启动模式？我是这么区分的，带UEFI四个字的表明是UEFI启动模式，不带UEFI的就是传统的启动模式。所以现在说了半天，一共只有两种启动模式。只不过这两种启动模式有好多种通俗的叫法。  </p><h1 id="Legacy模式安装"><a href="#Legacy模式安装" class="headerlink" title="Legacy模式安装"></a>Legacy模式安装</h1><p>如果需要Legacy模式安装的话，那么我们需要在BIOS里面打开Legacy。首先将计算机关闭，然后开机，狂按F2(或者是其他能够进入BIOS的按键，不同电脑可能不一样，自行百度)，进入BIOS。如果进不了BIOS？<a href="/2018/05/23/windows-pc-cannot-select-boot-device/">Windows10 PC 无法进入选择启动项界面 无法进入BIOS界面</a><br>进入了BIOS之后，看到下面的画面，正如我们上面说的，不同的电脑BIOS的颜色，选项的位置都不一样，所以我只是拿下面这个做个例子。界面上会有提示告诉你怎么移动菜单。找到如下这种<code>Boot Mode</code>类似的可以选择启动模式的地方，选项是UEFI、Lagacy等。然后选择Legacy Support模式，如果没有这种<code>Boot Mode</code>类似的，那么就找什么Legacy Enable，Legacy Mode，Legacy Support，Launch CSM什么之类的，然后把Legacy支持打开。<br>打开了Legacy以后，电脑现在能够进入UEFI的，也能够进入Legacy的。<br><img src="https://images.yunhao.space/pica/windows-system-installation-tutor/18.png" alt="添加Legacy支持"><br>之后，保存设置并退出，这个也一般会有提示的，比如上图中，右下角，F10是保存并退出，如果没找到这种，找到Exit菜单，然后看看类似Exit and Save，Exit Saving Changes等等就行。<br>现在电脑是关闭状态，然后插入U盘，开机，狂按F12(或者是其他能够进入选择启动项界面的按键，不同电脑不一样，自行百度)。如果进不去？<a href="/2018/05/23/windows-pc-cannot-select-boot-device/">Windows10 PC 无法进入选择启动项界面 无法进入BIOS界面</a><br>下图就是选择启动项界面。我们可以对比只开启UEFI时候的选择启动项界面(就在上边儿，自己看下)，多了几项。前两个是Legacy模式的启动项，后两个是UEFI模式的启动项。中间那个莫名其妙不用管。我们选择第二个，USB HDD这个就是我们的Windows系统盘的Legacy模式安装的启动项。<br><img src="https://images.yunhao.space/pica/windows-system-installation-tutor/21.png" alt="选择启动项"><br>等一会儿然后进入下面这个界面了。细心的我们可以发现，这个界面相比UEFI模式启动的时候区别是，这个对话框有横向拉伸的迹象。<br><img src="https://images.yunhao.space/pica/windows-system-installation-tutor/22.png" alt="Legacy模式安装"><br>到这个界面之后，就和上边儿的安装一样了，就不多说了。  </p><h1 id="PE格式化SSD"><a href="#PE格式化SSD" class="headerlink" title="PE格式化SSD"></a>PE格式化SSD</h1><p>首先你得有一个WinPE的盘。WinPE是什么？如何制作？<a href="/2018/07/13/burn-windows-preinstallation-environment-disk/">U启动 制作WinPE启动盘 支持UEFI启动</a><br>然后确保你的电脑正常关闭，并能够进入BIOS，选择启动项界面，如果不知道按哪个按键，一般BIOS是F2，选择启动项是F12，也有Fn+F2和Fn+F12等等，ESC和Enter都有，具体是哪个按键请自行百度。<br>插入WinPE盘，按下开机按钮后，就狂按F12(能进入选择启动项的界面的按键)，进入选择启动项界面。如果怎么按都进入不了？<a href="/2018/05/23/windows-pc-cannot-select-boot-device/">Windows10 PC 无法进入选择启动项界面 无法进入BIOS界面</a><br>然后会到选择启动项界面。这个界面上，Windows Boot Manager是我电脑上现存的windows10的启动项，括号里的是磁盘的编号，EFI USB Device这个就是WinPE了，括号里是我U盘的牌子，我们上下键移动选中EFI USB Device，然后Enter键进入PE。<br><img src="https://images.yunhao.space/pica/windows-system-installation-tutor/2.png" alt="选择启动项"><br>然后等待一会儿，会有读条什么的，等到进入下图这个界面，说明成功进入了PE。<br><img src="https://images.yunhao.space/pica/windows-system-installation-tutor/19.png" alt="选择启动项"><br>然后用PE里面自带的磁盘管理工具，新建一个分区，格式化一下SSD磁盘，NTFS格式。我现在没有SSD，所以没办法拍照，所以，就意会一下，等以后有了再修改博文。  </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;更换了SSD需要装windows系统？Windows10出问题了怎么办？总是蓝屏，重启电脑也解决不了，这种时候多半是系统某些地方坏了。如果自己不能够排查出来的话，就用某弛一句话，重装系统多半能解决问题。那么如何重装windows10呢？上维修点让别人给装？还得花不少钱，还不如自己装。本文教你如何装windows10系统。  &lt;/p&gt;
    
    </summary>
    
      <category term="系统安装" scheme="http://yunhao.space/categories/%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/"/>
    
    
      <category term="系统安装" scheme="http://yunhao.space/tags/%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/"/>
    
      <category term="Windows" scheme="http://yunhao.space/tags/Windows/"/>
    
      <category term="UEFI" scheme="http://yunhao.space/tags/UEFI/"/>
    
      <category term="Legacy" scheme="http://yunhao.space/tags/Legacy/"/>
    
  </entry>
  
  <entry>
    <title>刻录 Ubuntu16.04 系统盘 UltraISO刻录法</title>
    <link href="http://yunhao.space/2018/07/11/burn-ubuntu-installation-disk/"/>
    <id>http://yunhao.space/2018/07/11/burn-ubuntu-installation-disk/</id>
    <published>2018-07-11T15:10:19.000Z</published>
    <updated>2019-01-23T05:03:13.357Z</updated>
    
    <content type="html"><![CDATA[<p>大学帮别人装了不少系统，双系统什么的，自己也看过不少博文，对装系统这方面有了些体会。应多位故人建议，总结整理。本文主要讲如何刻录Ubuntu的系统盘，以及Ubuntu系统镜像的来源。以16.04为例。  </p><a id="more"></a><h1 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h1><p>Ubuntu镜像不难得，在<a href="https://www.ubuntu.com/download/desktop" target="_blank" rel="noopener">Ubuntu的官方网站</a>上就有，细心找找就能够找到镜像下载，一般都是1个G多。下载之后是<code>.iso</code>文件。  </p><h1 id="UltraISO刻录"><a href="#UltraISO刻录" class="headerlink" title="UltraISO刻录"></a>UltraISO刻录</h1><p>刻录方式和windows大同小异。<a href="/2018/07/11/burn-windows-installation-disk/">刻录 Windows10 系统盘 UltraISO刻录法 与 官方工具法</a><br>我们需要UltraISO和下载好的Ubuntu的<code>.iso</code>镜像文件<br>首先打开UltraISO，如果没激活，请自行激活。点击文件，打开，然后打开镜像文件。<br><img src="https://images.yunhao.space/pica/burn-ubuntu-installation-disk/1.png" alt="打开镜像"><br>然后点击启动，写入硬盘映像。弹出对话框<br><img src="https://images.yunhao.space/pica/burn-ubuntu-installation-disk/2.png" alt="写入映像"><br>然后磁盘驱动器选择你要刻录的U盘(U盘质量不要太差)，然后写入方式选USB-HDD+，然后点击写入。等一会儿就刻录成功了。<br><img src="https://images.yunhao.space/pica/burn-ubuntu-installation-disk/3.png" alt="刻录"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;大学帮别人装了不少系统，双系统什么的，自己也看过不少博文，对装系统这方面有了些体会。应多位故人建议，总结整理。本文主要讲如何刻录Ubuntu的系统盘，以及Ubuntu系统镜像的来源。以16.04为例。  &lt;/p&gt;
    
    </summary>
    
      <category term="系统安装" scheme="http://yunhao.space/categories/%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/"/>
    
    
      <category term="UltraISO" scheme="http://yunhao.space/tags/UltraISO/"/>
    
      <category term="Ubuntu" scheme="http://yunhao.space/tags/Ubuntu/"/>
    
      <category term="系统安装" scheme="http://yunhao.space/tags/%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>刻录 Windows10 系统盘 UltraISO刻录法 与 官方工具法</title>
    <link href="http://yunhao.space/2018/07/11/burn-windows-installation-disk/"/>
    <id>http://yunhao.space/2018/07/11/burn-windows-installation-disk/</id>
    <published>2018-07-11T15:09:54.000Z</published>
    <updated>2019-01-23T05:03:13.357Z</updated>
    
    <content type="html"><![CDATA[<p>大学的时候，学会了装系统。干装系统这活儿也有两年了。说下刻录windows10系统盘的两种方法。UltraISO刻录方法，与官方的工具刻录方法。还有windows镜像的获得方法。  </p><a id="more"></a><h1 id="UltraISO-iso镜像文件-刻录"><a href="#UltraISO-iso镜像文件-刻录" class="headerlink" title="UltraISO + .iso镜像文件 刻录"></a>UltraISO + .iso镜像文件 刻录</h1><p>首先你需要有UltraISO 软碟通软件，去百度下载。还需要有widows10的镜像文件。一般是.iso文件<br>激活UltraISO软件，激活码善用搜索引擎。已经激活的话，请继续看<br><img src="https://images.yunhao.space/pica/burn-windows-installation-disk/1.png" alt="激活软件"><br>软件激活之后，打开软件。然后点击文件，打开，打开.iso镜像文件。<br><img src="https://images.yunhao.space/pica/burn-windows-installation-disk/2.png" alt="打开文件"><br>然后点击启动，写入硬盘映像，弹出窗口<br><img src="https://images.yunhao.space/pica/burn-windows-installation-disk/3.png" alt="刻录"><br>磁盘驱动器选择你要做成系统盘的U盘，写入方式选择USB-HDD+，然后点击写入。<br><img src="https://images.yunhao.space/pica/burn-windows-installation-disk/4.png" alt="开始制作"><br>刻录U盘的时候会格式化U盘(U盘质量不要太差)，确保备份好U盘文件。<br><img src="https://images.yunhao.space/pica/burn-windows-installation-disk/5.png" alt="格式化确认"><br>等待20分钟左右，就成功了。<br><img src="https://images.yunhao.space/pica/burn-windows-installation-disk/6.png" alt="成功"></p><h1 id="写入方式"><a href="#写入方式" class="headerlink" title="写入方式"></a>写入方式</h1><p>如果不想了解写入方式的话，那么就跳过这一节。<br>写入方式，其实就是U盘的工作模式。有USB-HDD、USB-ZIP、RAW、USB-FDD、USB-CDROM等等。这些不同的模式，电脑在启动这个U盘的时候，将U盘视作不同的东西，按照不同的方式处理。<br>USB-HDD，HDD是Hard Disk Driver，这是硬盘仿真模式，把U盘当做硬盘启动。这种模式兼容性很高，缺点是对于一些只支持USB-ZIP模式的电脑则无法启动。<br>USB-HDD+，USB-HDD的增强版，同样对于只支持USB-ZIP的无法启动。兼容性比USB-HDD更好<br>USB-HDD+ v2，USB-HDD的增强模式。同样对于只支持USB-ZIP的无法启动。兼容性比USB-HDD更好<br>USB-ZIP，大容量软盘仿真模式，此模式在一些比较老的电脑上是唯一可选的模式，但对大部分新电脑来说兼容性不好，特别是2GB以上的大容量U盘。<br>USB-ZIP+，USB-ZIP的增强版<br>USB-ZIP+ v2，USB-ZIP的增强版<br>USB-FDD，FDD是Floppy Disk Driver，软盘仿真模式。一般的软盘都用这个模式来启动。<br>USB-CDROM，光盘仿真模式。<br>RAW，未经处理的。未格式化的磁盘。  </p><h1 id="官方工具-刻录"><a href="#官方工具-刻录" class="headerlink" title="官方工具 刻录"></a>官方工具 刻录</h1><p>这个官方的工具叫MediaCreationTool，下载地址<a href="https://go.microsoft.com/fwlink/?LinkId=691209" target="_blank" rel="noopener">MediaCreationTool</a>，这个工具不仅可以直接刻录U盘，还能够下载windows10的iso镜像文件。<br>首先打开这个文件，然后出现下面的界面，等待一会儿。<br><img src="https://images.yunhao.space/pica/burn-windows-installation-disk/7.png" alt="媒体创建工具"><br><img src="https://images.yunhao.space/pica/burn-windows-installation-disk/8.png" alt="加载界面"><br><img src="https://images.yunhao.space/pica/burn-windows-installation-disk/9.png" alt="加载界面"><br>如果提示更新了，如下：点击下载更新的媒体创建工具，如果没提示更新，请继续往下看。<br><img src="https://images.yunhao.space/pica/burn-windows-installation-disk/10.png" alt="提示更新"><br>然后弹出一个网页，网页中点击立即下载工具，就能够下载最新的媒体创建工具。下载完之后，打开新的媒体创建工具。<br><img src="https://images.yunhao.space/pica/burn-windows-installation-disk/11.png" alt="下载工具"><br>打开媒体创建工具，等一会儿，然后会出现下面的这个界面，点击接受<br><img src="https://images.yunhao.space/pica/burn-windows-installation-disk/12.png" alt="接受协议"><br>然后出现下面，点击创建安装介质，然后下一步，这个就是刻录U盘的<br><img src="https://images.yunhao.space/pica/burn-windows-installation-disk/13.png" alt="安装介质"><br>然后确认一下这个是不是自己想要的windows版本，一般默认就行。然后下一步<br><img src="https://images.yunhao.space/pica/burn-windows-installation-disk/14.png" alt="选择版本"><br>这个时候注意，如果选择ISO文件的话，那么它会下载windows10的镜像文件，然后保存到本地。如果刻录U盘(U盘质量不要太差)，选择U盘，然后点击下一步<br><img src="https://images.yunhao.space/pica/burn-windows-installation-disk/15.png" alt="U盘"><br>选择你要制作系统盘的U盘，然后点击下一步。<br><img src="https://images.yunhao.space/pica/burn-windows-installation-disk/16.png" alt="选择U盘"><br>等一会儿就好了。成功之后会有提示。这个时间比上面直接刻录时间要长一点。因为是先下载下来，然后给你刻录到U盘中。不过这种方式刻录的U盘总是最新版本的windows10。这也是这种方式的好处。  </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;大学的时候，学会了装系统。干装系统这活儿也有两年了。说下刻录windows10系统盘的两种方法。UltraISO刻录方法，与官方的工具刻录方法。还有windows镜像的获得方法。  &lt;/p&gt;
    
    </summary>
    
      <category term="系统安装" scheme="http://yunhao.space/categories/%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/"/>
    
    
      <category term="UltraISO" scheme="http://yunhao.space/tags/UltraISO/"/>
    
      <category term="系统安装" scheme="http://yunhao.space/tags/%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/"/>
    
      <category term="Windows" scheme="http://yunhao.space/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>Hexo NexT 添加 Gitalk评论功能</title>
    <link href="http://yunhao.space/2018/07/04/hexo-next-gitalk-comments-tutor/"/>
    <id>http://yunhao.space/2018/07/04/hexo-next-gitalk-comments-tutor/</id>
    <published>2018-07-04T03:30:52.000Z</published>
    <updated>2019-01-23T05:03:13.357Z</updated>
    
    <content type="html"><![CDATA[<p>多说关闭之后，其实还有好多评论，友言、畅言、来比力、disqus、Valine、HyperComments、Gitment。这些我都看过，都不太喜欢。来比力是韩国出的，HyperComments俄罗斯出的，畅言好像得备案才行，Valine是基于LeanCloud的而且匿名的话太丑了，Gitment移动端适配不好，等等问题。最终我找到了Gitalk这个插件。本文介绍如何给Hexo添加Gitalk评论功能，以NexT主题为例。  </p><a id="more"></a><h1 id="Gitalk"><a href="#Gitalk" class="headerlink" title="Gitalk"></a>Gitalk</h1><p>Gitalk和Gitment一样，是利用GitHub的Issue功能。移动端适配比Gitment好。目前Gitalk还没有被默认集成进NexT主题里。所以需要自己配置。  </p><h1 id="新建OAuth应用"><a href="#新建OAuth应用" class="headerlink" title="新建OAuth应用"></a>新建OAuth应用</h1><p>登陆GitHub，然后点击头像，然后Settings，Developer settings。如下：<br><img src="https://images.yunhao.space/pica/hexo-next-gitalk-comments-tutor/1.png" alt="Developer settings"><br>然后，点击OAuth Apps，New OAuth App，如下：<br><img src="https://images.yunhao.space/pica/hexo-next-gitalk-comments-tutor/2.png" alt="新建OAuth应用"><br>填写下面红框的内容。Application Name随便起，Homepage URL是你需要用这个应用的地址，就是博客的地址，callback URL是你的回调地址，一般填你的博客地址。如果你在调试的话，可以填localhost<br><img src="https://images.yunhao.space/pica/hexo-next-gitalk-comments-tutor/3.png" alt="填写内容"><br>然后，你会跳到这个界面。client id和secret这两个有用。记得不要给别人<br><img src="https://images.yunhao.space/pica/hexo-next-gitalk-comments-tutor/4.png" alt="ID和Secret"></p><h1 id="添加代码"><a href="#添加代码" class="headerlink" title="添加代码"></a>添加代码</h1><p>在主题中添加代码，我是强迫症，秉着对NexT主题代码最小的破坏。而且最好在NexT主题中该加代码的地方加。<br>找到NexT的主题目录，然后进入这个路径<code>/next/layout/_custom/</code>下，应该有head.swig，header.swig，sidebar.swig这三个文件。<br>这三个文件应该就是自定义布局的位置。然后，在sidebar.swig里面添加如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if page.comments and config.gitalk.enable %&#125;</span><br><span class="line">  &lt;link rel=&quot;stylesheet&quot; href=&quot;&#123;&#123; config.gitalk.gitalk_css &#125;&#125;&quot;&gt;</span><br><span class="line">  &lt;script src=&quot;&#123;&#123; config.gitalk.gitalk_js &#125;&#125;&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script src=&quot;&#123;&#123; config.gitalk.md5 &#125;&#125;&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">      var gitalk = new Gitalk(&#123;</span><br><span class="line">        clientID: &apos;&#123;&#123; config.gitalk.clientID &#125;&#125;&apos;,</span><br><span class="line">        clientSecret: &apos;&#123;&#123; config.gitalk.clientSecret &#125;&#125;&apos;,</span><br><span class="line">        repo: &apos;&#123;&#123; config.gitalk.repo &#125;&#125;&apos;,</span><br><span class="line">        owner: &apos;&#123;&#123; config.gitalk.owner &#125;&#125;&apos;,</span><br><span class="line">        admin: &apos;&#123;&#123; config.gitalk.admin &#125;&#125;&apos;,</span><br><span class="line">        id: md5(location.pathname),</span><br><span class="line">        distractionFreeMode: &apos;true&apos;</span><br><span class="line">      &#125;);</span><br><span class="line">      var div = document.createElement(&apos;div&apos;);</span><br><span class="line">      div.setAttribute(&quot;id&quot;, &quot;gitalk_comments&quot;);</span><br><span class="line">      div.setAttribute(&quot;class&quot;, &quot;post-nav&quot;);</span><br><span class="line">      var bro = document.getElementById(&apos;posts&apos;).getElementsByTagName(&apos;article&apos;);</span><br><span class="line">      bro = bro[0].getElementsByClassName(&apos;post-block&apos;);</span><br><span class="line">      bro = bro[0].getElementsByTagName(&apos;footer&apos;);</span><br><span class="line">      bro = bro[0];</span><br><span class="line">      bro.appendChild(div);</span><br><span class="line">      gitalk.render(&apos;gitalk_comments&apos;);</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure></p><p>注意，15行至第22行，是给评论区找一个div，然后23行将div的id传过去。  </p><h1 id="修改站点配置文件"><a href="#修改站点配置文件" class="headerlink" title="修改站点配置文件"></a>修改站点配置文件</h1><p>找到<code>站点配置文件</code>，然后添加以下内容。owner是你的github登录名，repo是博客在github上边的仓库名，admin写自己的github登录名，clientID和clientSecret填写上边得到的那两个，下面的三个cdn不要修改<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Gitalk评论</span></span><br><span class="line"><span class="attr">gitalk:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  owner:</span> </span><br><span class="line"><span class="attr">  repo:</span> </span><br><span class="line"><span class="attr">  admin:</span> </span><br><span class="line"><span class="attr">  clientID:</span> </span><br><span class="line"><span class="attr">  clientSecret:</span> </span><br><span class="line"><span class="attr">  gitalk_css:</span> <span class="string">//cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.css</span></span><br><span class="line"><span class="attr">  gitalk_js:</span> <span class="string">//cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.min.js</span></span><br><span class="line"><span class="attr">  md5:</span> <span class="string">//cdn.bootcss.com/blueimp-md5/1.1.0/js/md5.min.js</span></span><br></pre></td></tr></table></figure></p><h1 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h1><p>每次<code>hexo d</code>之后，都要去博客里面看一下，登陆自己的github，然后这个时候会自动初始化评论区。必须初始化一下。这个比gitment的点击才能初始化功能稍微方便点。只需要进入那个界面就可以了。  </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;多说关闭之后，其实还有好多评论，友言、畅言、来比力、disqus、Valine、HyperComments、Gitment。这些我都看过，都不太喜欢。来比力是韩国出的，HyperComments俄罗斯出的，畅言好像得备案才行，Valine是基于LeanCloud的而且匿名的话太丑了，Gitment移动端适配不好，等等问题。最终我找到了Gitalk这个插件。本文介绍如何给Hexo添加Gitalk评论功能，以NexT主题为例。  &lt;/p&gt;
    
    </summary>
    
      <category term="Hexo" scheme="http://yunhao.space/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://yunhao.space/tags/Hexo/"/>
    
      <category term="NexT" scheme="http://yunhao.space/tags/NexT/"/>
    
      <category term="Gitalk" scheme="http://yunhao.space/tags/Gitalk/"/>
    
  </entry>
  
  <entry>
    <title>域名解析配置教程</title>
    <link href="http://yunhao.space/2018/07/01/domain-name-parsing-setting-tutor/"/>
    <id>http://yunhao.space/2018/07/01/domain-name-parsing-setting-tutor/</id>
    <published>2018-07-01T15:21:19.000Z</published>
    <updated>2019-01-23T05:03:13.357Z</updated>
    
    <content type="html"><![CDATA[<p>配了好多次域名解析了，每次都有那么几个记录类型不清楚是什么意思，今天总结一下域名解析如何配置。  </p><a id="more"></a><h1 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h1><p>我们购买的域名一般都是一级域名，有可能是二级的，举个例子。<code>yunhao.space</code>这个域名是我从GoDaddy那里买来的。space是顶级域名，yunhao是一级域名，我买的是一级域名。如果你买的是<code>haha.org.cn</code>，那么，你买的就是二级域名haha，org是一级域名，cn是顶级域名。  </p><h1 id="字段简介"><a href="#字段简介" class="headerlink" title="字段简介"></a>字段简介</h1><p>域名配置的时候几乎都是大同小异。这里简要介绍一下如何添加解析记录。添加解析记录的时候一般都有下面几个字段。我们假设买的域名是一级域名，也是就<code>yunhao.space</code>，第一个就是主机记录，第二个字段是记录类型，然后是记录值，TTL。其余的字段都几乎不需要设置，默认就行。我们接下来详细说下每个字段。  </p><h1 id="主机记录"><a href="#主机记录" class="headerlink" title="主机记录"></a>主机记录</h1><p>这个就是你自己起的二级域名。<br>比如，我想设置<code>blog.yunhao.space</code>的解析，那么这个位置就填blog，这个二级域名是你自己随便起的。<br>如果你想设置二级域名为空，那么就填<code>@</code>，就是<code>yunhao.space</code>的解析。<br>想设置手机网站访问时候自动访问的域名，就填<code>m</code><br>想设置邮箱服务器的域名，就写<code>mail</code><br>有的DNS解析服务提供商会有一些类似泛解析的设定，就是匹配其他所有域名，填<code>*</code>。  </p><h1 id="记录类型与记录值"><a href="#记录类型与记录值" class="headerlink" title="记录类型与记录值"></a>记录类型与记录值</h1><p>这个记录类型，跟记录值是有对应关系的。<br>A类型，用来将域名解析成IP地址，记录值位置填写对应的IPv4地址。<br>CNAME类型，用来将域名解析成另一个域名，记录值位置填写要解析成的域名。<br>MX类型，设置邮箱的时候，需要选的类型。<br>TXT类型，可以写任何东西，一般用来做SPF记录，反垃圾邮件。<br>NS类型，如果需要把子域名给其他DNS服务商解析，就要填NS。<br>AAAA类型，记录值处指定IPv6地址。<br>SRV类型，记录了那台计算机提供了什么服务。<br>SOA类型，表明此DNS名称服务器是为该DNS域中的数据的信息的最佳来源。SOA记录与NS记录的区别：NS记录表示域名服务器记录，用来指定该域名由哪个DNS服务器来进行解析；SOA记录设置一些数据版本和更新以及过期时间的信息。  </p><h1 id="TTL"><a href="#TTL" class="headerlink" title="TTL"></a>TTL</h1><p>单位是秒，是缓存失效时间。<br>越低更新越快。但是相比，解析速度就慢了。越高解析越快，越稳定，更新速度慢<br>如果你不想花钱的话，最低一般能设置600秒。  </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;配了好多次域名解析了，每次都有那么几个记录类型不清楚是什么意思，今天总结一下域名解析如何配置。  &lt;/p&gt;
    
    </summary>
    
      <category term="服务器" scheme="http://yunhao.space/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="域名" scheme="http://yunhao.space/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/%E5%9F%9F%E5%90%8D/"/>
    
    
      <category term="域名" scheme="http://yunhao.space/tags/%E5%9F%9F%E5%90%8D/"/>
    
      <category term="DNS" scheme="http://yunhao.space/tags/DNS/"/>
    
  </entry>
  
  <entry>
    <title>GitHub Hexo 博客 GitHub Pages 个人站点 多域名绑定问题</title>
    <link href="http://yunhao.space/2018/07/01/github-blog-multiple-domain-bundling-issue/"/>
    <id>http://yunhao.space/2018/07/01/github-blog-multiple-domain-bundling-issue/</id>
    <published>2018-07-01T15:19:54.000Z</published>
    <updated>2019-01-23T05:03:13.357Z</updated>
    
    <content type="html"><![CDATA[<p>我的个人站点托管在GitHub上，想要多个域名都能够正常访问站点，比如，yunhao.space可以访问站点，blog.yunhao.space也可以访问站点。记录一次折腾。因为设置过程中，会有缓存，所以吧有的时候，不一定能够是真的能访问，所以得再三确认。  </p><a id="more"></a><h1 id="GitHub-Pages"><a href="#GitHub-Pages" class="headerlink" title="GitHub Pages"></a>GitHub Pages</h1><p>GitHub Pages提供了将项目设置成站点的功能。可以通过特定的网址访问。<br>GitHub Pages站点有两类，第一类是用户组织站点，第二类是项目站点。第一类站点的仓库名字必须和用户名一样，第二类站点的仓库名字可以随便。访问第一类站点网址是<code>username.github.io</code>，访问第二类站点网址是<code>username.github.io/repository_name</code>。<br>官方说，用户组织站点，每个账户只能有一个，而项目站点每个项目无限。详见<a href="https://help.github.com/articles/troubleshooting-custom-domains/#reached-limit-for-user-or-organization-pages-site" target="_blank" rel="noopener">官方文档</a><br>个人站点就是用户站点。  </p><h1 id="多域名绑定的官方解释"><a href="#多域名绑定的官方解释" class="headerlink" title="多域名绑定的官方解释"></a>多域名绑定的官方解释</h1><p><a href="https://help.github.com/articles/troubleshooting-custom-domains/#multiple-domains-in-cname-file" target="_blank" rel="noopener">Multiple domains in CNAME file</a>，这是官方解释：  </p><blockquote><p>A CNAME file can contain only one domain. To point multiple domains to the same Page, set up redirects through your DNS provider.  </p></blockquote><p>官方说github上的CNAME文件中只能有一个域名。我们就要另寻他法。  </p><h1 id="301重定向"><a href="#301重定向" class="headerlink" title="301重定向"></a>301重定向</h1><p>于是我们想到了301重定向。为什么一定要重定向呢？<br>重定向可以让我们浏览器的地址栏修改url。如果只是在dns做CNAME解析的话，是没办法让地址栏修改url的。于是我们就会看到GitHub的404。<br>有人说了，我们可以自己定义一个404.html，然后放在个人站点的根目录下，然后404.html中用js的window.location.href重定向不就好了？<br><strong>这会失败</strong>，因为这个404的错误，是github找不到你的个人站点的根目录，报的404，就是说github不知道你想访问哪个项目。<br>而在个人站点根目录下放404.html只能解决在这个目录下找不到某个文件什么的问题，显示404.html的内容。<br>所以，上边那种做法会失败。  </p><h1 id="服务器重定向"><a href="#服务器重定向" class="headerlink" title="服务器重定向"></a>服务器重定向</h1><p>这里以Nginx服务器做例子。如果你想将域名blog.yunhao.space 301重定向到 yunhao.space的话，那么如下配置nginx的服务器：<br>我的服务器是Ubuntu16.04，nginx是apt-get安装的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /etc/nginx/sites-available</span><br><span class="line">vim redirection.conf</span><br></pre></td></tr></table></figure></p><p>新建redirection.conf之后，在文件中按照下面这样写入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        server_name blog.yunhao.space;</span><br><span class="line">        rewrite ^(.*)$ http://yunhao.space$1 permanent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>保存退出后，重启一下nginx服务<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd /etc/nginx/sites-enabled</span><br><span class="line">ln -s /etc/nginx/sites-available/redirection.conf redirection</span><br><span class="line">systemctl stop nginx.service</span><br><span class="line">systemctl start nginx.service</span><br></pre></td></tr></table></figure></p><p>记得dns添加A解析，<code>blog.yunhao.space</code>解析到服务器IP地址，如果不会，参考<a href="/2018/07/01/domain-name-parsing-setting-tutor/">域名解析配置教程</a><br>然后等一会儿，测试一下，就成功了。这个方法可以说是最直接的，最正常的，我就是采用的这种方法。<br>记得设置nginx开机自启动，否则重启之后，就不能提供服务了。  </p><h1 id="GitHub多项目重定向"><a href="#GitHub多项目重定向" class="headerlink" title="GitHub多项目重定向"></a>GitHub多项目重定向</h1><p>这个方法取自一个GitHub Pages的特性。  </p><ul><li>项目站点可以有自己的域名，不一定要用<code>个人站点域名/项目名称</code>来访问。  </li></ul><p>解释一下，比如个人站点域名是<code>yunhao.space</code>，github上有个项目站点，项目名字是test，那么在配置好GitHub Pages的情况下，可以通过<code>yunhao.space/test</code>来访问。这个是官方文档中说明的。<br>其实GitHub Pages的项目站点域名绑定比官方说的更强大，也就是说虽然你的个人站点绑定域名是<code>yunhao.space</code>，项目站点可以绑定<code>test.yunhao.space</code>，甚至是<code>test.yunhao.life</code>，顶级域名都可以不一样。<br>想要使用上边特性其实很简单，需要注意两点，第一就是dns解析和github仓库中CNAME文件相对应。第二就是github仓库开启了GitHub Pages服务。<br>下面我继续说这个通过多个项目站点进行重定向的方法。这个例子就正好能够反映上边这个GitHub Pages的特性。<br>比如现在我的<code>yunhao.space</code>已经绑定了个人站点，我想让<code>test.yunhao.life</code>这个域名也指向我的个人站点。<br>首先，dns添加CNAME解析，<code>test.yunhao.life</code>解析到<code>lmnsyunhao.github.io</code>如果不会，参考<a href="/2018/07/01/domain-name-parsing-setting-tutor/">域名解析配置教程</a><br>然后，在github上新建一个仓库，名字比如说叫test。然后clone下来。<br>然后，test仓库里放一个CNAME文件，文件中写<code>test.yunhao.life</code>。<br>然后，test仓库里放404.html的文件。文件中用js重定向。如下：注意domain变量内设置自己的想要重定向到的域名<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">var domain = "yunhao.space";</span></span><br><span class="line"><span class="undefined">var src = window.location.href;</span></span><br><span class="line"><span class="undefined">var prtc = src.substring(0, src.indexOf(':'));</span></span><br><span class="line"><span class="undefined">var target = src.substring(src.indexOf('/', src.indexOf(':') + 3));</span></span><br><span class="line"><span class="undefined">window.location.href = prtc + "://" + domain + target;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>然后，将新增文件add, commit并push到github上master分支。<br>然后，开启test项目的GitHub Pages服务。如下：点击settings，然后往下滚，到GitHub Pages，然后选master，并保存。<br><img src="https://images.yunhao.space/pica/github-blog-multiple-domain-bundling-issue/2.png" alt="开启GitHub Pages服务"><br><img src="https://images.yunhao.space/pica/github-blog-multiple-domain-bundling-issue/3.png" alt="开启GitHub Pages服务"><br>等会儿，然后测试一下，应该就能定向了。  </p><h1 id="域名注册商重定向"><a href="#域名注册商重定向" class="headerlink" title="域名注册商重定向"></a>域名注册商重定向</h1><p>有点域名注册商提供了重定向服务，比如GoDaddy，腾讯云。腾讯云的重定向，如下图：<br><img src="https://images.yunhao.space/pica/github-blog-multiple-domain-bundling-issue/1.png" alt="腾讯云重定向"><br>显性URL类型就是301重定向服务，不过大家也从上边的弹窗看到了，有些限制。所以，我在GoDaddy上边找到了重定向服务。<br>因为我的域名就是在GoDaddy上边买的。所以我就直接设置了。我看了看，GoDaddy上边好像不能接管别的域名注册商处注册的域名。如果你是GoDaddy买的域名，那么恭喜你了。这个方法，你可以看一看，否则的话你就得看看自己的域名注册商是否提供重定向服务了。<br>首先登陆GoDaddy，然后点击我的产品。<br><img src="https://images.yunhao.space/pica/github-blog-multiple-domain-bundling-issue/4.png" alt="我的产品"><br>比如，我们要将<code>yunhao.life</code>重定向到<code>yunhao.space</code>，点击DNS<br><img src="https://images.yunhao.space/pica/github-blog-multiple-domain-bundling-issue/5.png" alt="DNS"><br>如果域名服务不在GoDaddy托管的话，那么首先点击下面的域名服务器，更改回默认的来，然后等更新好了，再继续。如果没出现这种情况，继续往下看：<br><img src="https://images.yunhao.space/pica/github-blog-multiple-domain-bundling-issue/6.png" alt="修改托管DNS服务"><br>找到转址这一块儿。上边域名转址是处理形如<code>yunhao.life</code>转到<code>yunhao.space</code>的，而子域名转址是<code>blog.yunhao.life</code>转到<code>yunhao.space</code>的，区别是二级域名是否为空。<br><img src="https://images.yunhao.space/pica/github-blog-multiple-domain-bundling-issue/7.png" alt="转址"><br>然后下面是域名转址的修改方式：即从<code>yunhao.life</code>转到<code>yunhao.space</code><br><img src="https://images.yunhao.space/pica/github-blog-multiple-domain-bundling-issue/8.png" alt="域名转址"><br>如果想设置子域名转址，比如<code>blog.yunhao.life</code>转到<code>yunhao.space</code>，如下：<br><img src="https://images.yunhao.space/pica/github-blog-multiple-domain-bundling-issue/9.png" alt="域名转址"><br>现在就设置完了，估计得等一会儿，才能生效。我等了半个多小时。这个域名注册商提供的转址服务不一定快。比如GoDaddy这个的确能转。但是速度有点儿慢。而且好像对于<code>yunhao.life/hello.html</code>转到<code>yunhao.space/hello.html</code>类似情况不支持。  </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我的个人站点托管在GitHub上，想要多个域名都能够正常访问站点，比如，yunhao.space可以访问站点，blog.yunhao.space也可以访问站点。记录一次折腾。因为设置过程中，会有缓存，所以吧有的时候，不一定能够是真的能访问，所以得再三确认。  &lt;/p&gt;
    
    </summary>
    
      <category term="服务器" scheme="http://yunhao.space/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="域名" scheme="http://yunhao.space/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/%E5%9F%9F%E5%90%8D/"/>
    
    
      <category term="域名" scheme="http://yunhao.space/tags/%E5%9F%9F%E5%90%8D/"/>
    
      <category term="DNS" scheme="http://yunhao.space/tags/DNS/"/>
    
      <category term="服务器" scheme="http://yunhao.space/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="GitHub" scheme="http://yunhao.space/tags/GitHub/"/>
    
      <category term="Hexo" scheme="http://yunhao.space/tags/Hexo/"/>
    
      <category term="GoDaddy" scheme="http://yunhao.space/tags/GoDaddy/"/>
    
      <category term="腾讯云" scheme="http://yunhao.space/tags/%E8%85%BE%E8%AE%AF%E4%BA%91/"/>
    
      <category term="Nginx" scheme="http://yunhao.space/tags/Nginx/"/>
    
      <category term="GitHub Pages" scheme="http://yunhao.space/tags/GitHub-Pages/"/>
    
  </entry>
  
  <entry>
    <title>NPM 学习笔记</title>
    <link href="http://yunhao.space/2018/06/30/npm-instruction-learning-note/"/>
    <id>http://yunhao.space/2018/06/30/npm-instruction-learning-note/</id>
    <published>2018-06-29T17:12:40.000Z</published>
    <updated>2019-01-23T05:03:13.361Z</updated>
    
    <content type="html"><![CDATA[<p>总结一下NPM的命令，防止以后总是去查阅。只是一些常用的命令，以及语义化版本号的含义。  </p><a id="more"></a><h1 id="NPM"><a href="#NPM" class="headerlink" title="NPM"></a>NPM</h1><p>NPM全称是node package manager。在安装nodejs的时候就会连带安装npm，用来维护和管理node_modules。我为什么要写这篇博客呢？因为懒得每次都百度。所以就mark一下。  </p><h1 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h1><p>官方的中文文档请见<a href="https://www.npmjs.com.cn/" target="_blank" rel="noopener">中文文档</a>  </p><h1 id="本地安装和全局安装"><a href="#本地安装和全局安装" class="headerlink" title="本地安装和全局安装"></a>本地安装和全局安装</h1><p>如果你自己的模块依赖于某个包，并通过 Node.js 的 require 加载，那么你应该选择本地安装，这种方式也是 npm install 命令的默认行为。<br>如果你想将包作为一个命令行工具，（比如 grunt CLI），那么你应该选择全局安装。  </p><h1 id="语义化版本号"><a href="#语义化版本号" class="headerlink" title="语义化版本号"></a>语义化版本号</h1><p>package.json中的dependencies里面都有version，那么version字段具体都表示什么含义呢？<br>a.b.c的含义，如下：<br>发布补丁，就增加最后一位数字，比如1.0.1<br>如果增加新功能，且不影响原有的功能，就增加小版本号，比如1.1.0<br>如果引入的变化，破坏了向后兼容性，就增加大版本号，比如2.0.0<br>对于依赖包的版本，版本位置应该怎样填写？  </p><ul><li>只接受补丁: 1.0 或 1.0.x 或 ~1.0.4</li><li>只接受小版本号和补丁: 1 或 1.x 或 ^1.0.4</li><li>接受全部更新: * 或 x</li></ul><h1 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h1><ul><li>npm更新<br><code>npm install npm -g</code><br><code>npm install npm@latest -g</code> 安装最新测试版<br><code>npm install npm@next -g</code> 安装下一个未发行版  </li><li>创建package.json<br><code>npm init</code><br><code>npm init -y</code> 会抽取项目的信息来生成package.json<br><code>npm init --yes</code> 会抽取项目的信息来生成package.json<br><code>npm set init.author.email &quot;wombat@npmjs.com&quot;</code> 设置初始化信息<br><code>npm set init.author.name &quot;ag_dubs&quot;</code> 设置初始化信息<br><code>npm set init.license &quot;MIT&quot;</code> 设置初始化信息  </li><li>查看npm版本<br><code>npm -v</code>  </li><li>安装模块<br><code>npm install &lt;package_name&gt;</code> 本地安装<br><code>npm install &lt;package_name&gt; -g</code> 全局安装<br><code>npm install &lt;package_name&gt; --save</code> 会将package_name添加到package.json中的dependencies下<br><code>npm install &lt;package_name&gt; --save-dev</code> 会将package_name添加到package.json中的devDependencies下  </li><li>更新模块<br><code>npm update [-g] [&lt;pkg&gt;...]</code> -g决定更新全局还是更新本地，如果没指定任何的pkg，那么就都更新。  </li><li>检查模块更新<br><code>npm outdated [[&lt;@scope&gt;/]&lt;pkg&gt; ...]</code>  </li><li>删除模块<br><code>npm uninstall &lt;package_name&gt;</code><br><code>npm uninstall --save &lt;package_name&gt;</code> 卸载并移除package.json中的依赖。  </li><li>查看全局安装的模块<br><code>npm list -g</code></li><li>查看某个模块的版本号<br><code>npm list &lt;Module Name&gt;</code></li><li>查看当前目录所有模块<br><code>npm ls</code></li><li>搜索某模块<br><code>npm search &lt;Module Name&gt;</code></li><li>查看某条命令帮助<br><code>npm help &lt;command&gt;</code></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;总结一下NPM的命令，防止以后总是去查阅。只是一些常用的命令，以及语义化版本号的含义。  &lt;/p&gt;
    
    </summary>
    
      <category term="NodeJS" scheme="http://yunhao.space/categories/NodeJS/"/>
    
    
      <category term="NPM" scheme="http://yunhao.space/tags/NPM/"/>
    
      <category term="NodeJS" scheme="http://yunhao.space/tags/NodeJS/"/>
    
  </entry>
  
  <entry>
    <title>Hexo NexT 添加 DaoVoice 在线聊天</title>
    <link href="http://yunhao.space/2018/06/30/hexo-next-add-daovoice-contact/"/>
    <id>http://yunhao.space/2018/06/30/hexo-next-add-daovoice-contact/</id>
    <published>2018-06-29T17:11:22.000Z</published>
    <updated>2019-01-23T05:03:13.357Z</updated>
    
    <content type="html"><![CDATA[<p>今天发现了一个有意思的在线聊天工具，DaoVoice，很有意思，还是免费的，本文讲如何将DaoVoice集成进Hexo博客，以NexT主题为例。其他主题些许不同。  </p><a id="more"></a><h1 id="DaoVoice"><a href="#DaoVoice" class="headerlink" title="DaoVoice"></a>DaoVoice</h1><p>一个实时在线沟通的工具。可以及时解答客户的问题。还能够绑定微信。具体请看<a href="http://blog.daovoice.io/daovocie_manhua/?utm_source=DaoCloud&amp;utm_campaign=39_campaign&amp;utm_medium=daovoice_widget&amp;utm_term=footer_link&amp;utm_content=one_min" target="_blank" rel="noopener">一分钟了解DaoVoice</a>  </p><h1 id="新建应用"><a href="#新建应用" class="headerlink" title="新建应用"></a>新建应用</h1><p>首先现在DaoVoice上注册一个账号。打开<a href="https://www.daocloud.io/" target="_blank" rel="noopener">DaoCloud首页</a>。找到DaoVoice服务，然后点击，如下图：<br><img src="https://images.yunhao.space/pica/hexo-next-add-daovoice-contact/1.png" alt="DaoVoice服务"><br>然后再下边的界面中选择注册，或登录。<br><img src="https://images.yunhao.space/pica/hexo-next-add-daovoice-contact/2.png" alt="注册或登录"><br>如果是新注册的用户，那么注册之后，就会看到下面的这个界面。这个是让你添加一个应用的，填写你的公司名称，你的电话号码，然后点击保存就好了<br><img src="https://images.yunhao.space/pica/hexo-next-add-daovoice-contact/3.png" alt="新建应用"><br>如果你是老用户了，找不到上边这个界面了，在下面的位置可以找到，找到之后向上边设置一下。<br><img src="https://images.yunhao.space/pica/hexo-next-add-daovoice-contact/4.png" alt="新建应用"></p><h1 id="安装到网站"><a href="#安装到网站" class="headerlink" title="安装到网站"></a>安装到网站</h1><p>如下图，点击应用设置，安装到网站，JS，仅匿名用户，然后找到下面两个代码。<br><img src="https://images.yunhao.space/pica/hexo-next-add-daovoice-contact/5.png" alt="安装到网站"><br>打开博客的主题目录下的文件<code>/themes/next/layout/_custom/head.swig</code>。<br>然后粘贴成下面这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;#</span><br><span class="line">Custom head.</span><br><span class="line">#&#125;</span><br><span class="line">&#123;% if config.daovoice %&#125;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">  (function(i,s,o,g,r,a,m)&#123;i[&quot;DaoVoiceObject&quot;]=r;i[r]=i[r]||function()&#123;(i[r].q=i[r].q||[]).push(arguments)&#125;,i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;a.charset=&quot;utf-8&quot;;m.parentNode.insertBefore(a,m)&#125;)(window,document,&quot;script&quot;,(&apos;https:&apos; == document.location.protocol ? &apos;https:&apos; : &apos;http:&apos;) + &quot;//widget.daovoice.io/widget/&#123;&#123;config.daovoice_app_id&#125;&#125;.js&quot;,&quot;daovoice&quot;)</span><br><span class="line">  daovoice(&apos;init&apos;, &#123;</span><br><span class="line">      app_id: &quot;&#123;&#123;config.daovoice_app_id&#125;&#125;&quot;</span><br><span class="line">    &#125;);</span><br><span class="line">  daovoice(&apos;update&apos;);</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure></p><p>注意app_id后边的那个要换一下，然后那个网址后边哪儿也要换成变量。就是上边图片中，那两段代码中被黑条盖住的部分要替换<br>那个被黑条盖住的部分就是你的app_id。打开<code>博客配置文件</code>然后增加下面内容：<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 实时联系</span></span><br><span class="line"><span class="attr">daovoice:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">daovoice_app_id:</span> <span class="string">你的app_id</span></span><br></pre></td></tr></table></figure></p><p>将<code>你的app_id</code>替换成黑条盖住的部分就行了。然后执行<code>hexo cl &amp; hexo g &amp; hexo d</code>，之后ping一下，如下图<br><img src="https://images.yunhao.space/pica/hexo-next-add-daovoice-contact/6.png" alt="Ping"><br>如果成功了，现在就已经接入了，网站右下角就应该有一个悬浮钮了。  </p><h1 id="微信绑定"><a href="#微信绑定" class="headerlink" title="微信绑定"></a>微信绑定</h1><p>绑定到微信，可以实时处理消息，回复消息。<br><img src="https://images.yunhao.space/pica/hexo-next-add-daovoice-contact/7.png" alt="微信绑定"><br>扫码之后，就能看到下面的绑定成功。<br><img src="https://images.yunhao.space/pica/hexo-next-add-daovoice-contact/8.png" alt="绑定成功"></p><h1 id="设置悬浮钮"><a href="#设置悬浮钮" class="headerlink" title="设置悬浮钮"></a>设置悬浮钮</h1><p>如果悬浮钮遮挡其他元素了，或者是想设置悬浮钮的颜色，什么的。点击应用设置，聊天设置，如下图：<br><img src="https://images.yunhao.space/pica/hexo-next-add-daovoice-contact/9.png" alt="聊天设置"><br>在这里，我们可以设置欢迎语，按钮的颜色，位置什么的。  </p><h1 id="新消息指派"><a href="#新消息指派" class="headerlink" title="新消息指派"></a>新消息指派</h1><p>设置一下新消息指派，点击应用设置，新消息设置，默认指派选择自己。如下图<br><img src="https://images.yunhao.space/pica/hexo-next-add-daovoice-contact/10.png" alt="新消息指派"></p><h1 id="费用问题"><a href="#费用问题" class="headerlink" title="费用问题"></a>费用问题</h1><p>这个应用是免费的。不过也有付费版。你的网站用户数小于5000的时候，就是免费的。具体的需不需要付费，请看<a href="http://guide.daocloud.io/daovoice/%E6%94%B6%E8%B4%B9%E8%A7%84%E5%88%99-9145665.html?_ga=2.184733417.1747920387.1530264739-470864725.1530264739" target="_blank" rel="noopener">资费情况</a>  </p><h1 id="用户手册"><a href="#用户手册" class="headerlink" title="用户手册"></a>用户手册</h1><p>其他问题，请自行查阅<a href="http://guide.daocloud.io/daovoice/daovoice-5868545.html" target="_blank" rel="noopener">官方用户手册</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天发现了一个有意思的在线聊天工具，DaoVoice，很有意思，还是免费的，本文讲如何将DaoVoice集成进Hexo博客，以NexT主题为例。其他主题些许不同。  &lt;/p&gt;
    
    </summary>
    
      <category term="Hexo" scheme="http://yunhao.space/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://yunhao.space/tags/Hexo/"/>
    
      <category term="NexT" scheme="http://yunhao.space/tags/NexT/"/>
    
      <category term="DaoVoice" scheme="http://yunhao.space/tags/DaoVoice/"/>
    
  </entry>
  
  <entry>
    <title>Hexo NexT 站内搜索 站点统计 RSS订阅 字数统计 阅读时长 进度条 图片放大 Canvas背景 DaoVoice聊天 Gitalk评论 功能配置</title>
    <link href="http://yunhao.space/2018/06/29/hexo-next-function-setting/"/>
    <id>http://yunhao.space/2018/06/29/hexo-next-function-setting/</id>
    <published>2018-06-29T11:11:35.000Z</published>
    <updated>2019-01-23T05:03:13.357Z</updated>
    
    <content type="html"><![CDATA[<p>Hexo的NexT主题的一些功能如何开启。如下：站内搜索功能、站点访客量、站点阅读量、站点总字数、站点总阅读时长、RSS订阅、博文字数、博文阅读时长、博文阅读量、优雅的进度条、点击博文内图片放大、Canvas背景、DaoVoice聊天、Gitalk评论  </p><a id="more"></a><h1 id="站内搜索"><a href="#站内搜索" class="headerlink" title="站内搜索"></a>站内搜索</h1><p>NexT支持集成Swiftype、微搜索、Local Search和Algolia。Swiftype、微搜索我没具体了解。<br>Algolia界面很优雅，因为这个是第三方的，每次都得<code>hexo algolia</code>来上传一下，多了一步操作。而且，Algolia有试用期，试用期过后就降为免费版了，免费版的搜索时不能对文章内容进行搜索。所以，我没用这个。<br>我用的是Local Search，这个是每次hexo g的时候都会产生一个<code>search.xml</code>的文件，搜索就是从这个文件里搜索，这个比较方便。而且支持文章内容搜索。下面说Local Search怎么配置。<br>先打开博客根目录，安装<code>hexo-generator-searchdb</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure></p><p>然后去<code>博客配置文件</code>中加入下面的<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line"><span class="attr">  path:</span> <span class="string">search.xml</span></span><br><span class="line"><span class="attr">  field:</span> <span class="string">post</span></span><br><span class="line"><span class="attr">  format:</span> <span class="string">html</span></span><br><span class="line"><span class="attr">  limit:</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure></p><p>解释一下各个字段含义：摘自<a href="https://github.com/theme-next/hexo-generator-searchdb" target="_blank" rel="noopener">官方</a></p><blockquote><ul><li>path - file path. By default is search.xml . If the file extension is .json, the output format will be JSON. Otherwise XML format file will be exported.</li><li>field - the search scope you want to search, you can chose:<ul><li>post (Default) - will only covers all the posts of your blog.</li><li>page - will only covers all the pages of your blog.</li><li>all - will covers all the posts and pages of your blog.</li></ul></li><li>format - the form of the page contents, works with xml mode, options are:<ul><li>html (Default) - original html string being minified.</li><li>raw - markdown text of each posts or pages.</li><li>excerpt - only collect excerpt.</li><li>more - act as you think.</li></ul></li><li>limit - define the maximum number of posts being indexed, always prefer the newest.</li></ul></blockquote><p>limit就是xml中的包含的最大论文篇数。<br>去<code>主题配置文件</code>中，打开local search。enable设置true<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Local search</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/theme-next/hexo-generator-searchdb</span></span><br><span class="line"><span class="attr">local_search:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># if auto, trigger search by changing input</span></span><br><span class="line">  <span class="comment"># if manual, trigger search by pressing enter key or search button</span></span><br><span class="line"><span class="attr">  trigger:</span> <span class="string">auto</span></span><br><span class="line">  <span class="comment"># show top n results per article, show all results by setting to -1</span></span><br><span class="line"><span class="attr">  top_n_per_article:</span> <span class="number">1</span></span><br><span class="line">  <span class="comment"># unescape html strings to the readable one</span></span><br><span class="line"><span class="attr">  unescape:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure></p><h1 id="站点访客量-站点阅读量"><a href="#站点访客量-站点阅读量" class="headerlink" title="站点访客量 站点阅读量"></a>站点访客量 站点阅读量</h1><p>这个用<a href="http://ibruce.info/2015/04/04/busuanzi/" target="_blank" rel="noopener">不蒜子</a>，去<code>主题配置文件</code>中打开busuanzi就好。<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Show Views/Visitors of the website/page with busuanzi.</span></span><br><span class="line"><span class="comment"># Get more information on http://ibruce.info/2015/04/04/busuanzi/</span></span><br><span class="line"><span class="attr">busuanzi_count:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  total_visitors:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  total_visitors_icon:</span> <span class="string">user</span></span><br><span class="line"><span class="attr">  total_views:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  total_views_icon:</span> <span class="string">eye</span></span><br><span class="line"><span class="attr">  post_views:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  post_views_icon:</span> <span class="string">eye</span></span><br></pre></td></tr></table></figure></p><p>特别说明一下，不蒜子就是统计每个url访问了多少次。虽然能够统计单片博文的访问量，但是没办法在主页显示某个博文的访问量，只有点进去这个博文，才能显示访问量。<br>所以单篇博文访问量我们用leancloud，详见<a href="/2018/06/27/hexo-leancloud-plugin-installation-tutor/">Hexo NexT 主题 LeanCloud 插件安装教程</a>  </p><h1 id="站点总字数-站点总阅读时长-博文字数-博文阅读时长"><a href="#站点总字数-站点总阅读时长-博文字数-博文阅读时长" class="headerlink" title="站点总字数 站点总阅读时长 博文字数 博文阅读时长"></a>站点总字数 站点总阅读时长 博文字数 博文阅读时长</h1><p>首先安装hexo-symbols-count-time，在博客根目录输入，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-symbols-count-time --save</span><br></pre></td></tr></table></figure></p><p>修改博客配置文件，打开<code>博客配置文件</code>，添加如下内容。<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line"><span class="attr">  symbols:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  time:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  total_symbols:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  total_time:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></p><p>symbols是博文字数，time是博文阅读时长，total_symbols是站点总字数，total_time是站点总阅读时长。<br>检查一下<code>主题配置文件</code>:<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Post wordcount display settings</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/theme-next/hexo-symbols-count-time</span></span><br><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line"><span class="attr">  separated_meta:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  item_text_post:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  item_text_total:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  awl:</span> <span class="number">4</span></span><br><span class="line"><span class="attr">  wpm:</span> <span class="number">275</span></span><br></pre></td></tr></table></figure></p><p>awl是平均字长度average word length，默认是4，wpm是阅读速度，word per minute。  </p><h1 id="RSS订阅"><a href="#RSS订阅" class="headerlink" title="RSS订阅"></a>RSS订阅</h1><p>打开<code>主题配置文件</code>，找到如下：<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Set rss to false to disable feed link.</span></span><br><span class="line"><span class="comment"># Leave rss as empty to use site's feed link, and install hexo-generator-feed: `npm install hexo-generator-feed --save`.</span></span><br><span class="line"><span class="comment"># Set rss to specific value if you have burned your feed already.</span></span><br><span class="line"><span class="attr">rss:</span></span><br></pre></td></tr></table></figure></p><p>如果你自己生成了rss，那么上边就填地址，否则的话留空。<br>安装hexo-generator-feed，在博客根目录输入，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure></p><p>每次<code>hexo g</code>的时候就会生成了atom.xml。  </p><h1 id="博文阅读量"><a href="#博文阅读量" class="headerlink" title="博文阅读量"></a>博文阅读量</h1><p>不蒜子统计每个url访问了多少次。虽然能够统计单篇博文的访问量，但是没办法在主页显示某个博文的访问量，只有点进去这个博文，才能显示访问量。<br>所以单篇博文访问量我们用leancloud，详见<a href="/2018/06/27/hexo-leancloud-plugin-installation-tutor/">Hexo NexT 主题 LeanCloud 插件安装教程</a>  </p><h1 id="优雅的进度条"><a href="#优雅的进度条" class="headerlink" title="优雅的进度条"></a>优雅的进度条</h1><p>NexT主题里面能够使用Pace来设置优雅的进度条，可以看下<a href="http://github.hubspot.com/pace/docs/welcome/" target="_blank" rel="noopener">Demo</a><br>首先需要<code>git clone</code>一下，打开<code>NexT</code>主题目录下的<code>source\lib</code>目录，执行下面操作<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/theme-next/theme-next-pace pace</span><br></pre></td></tr></table></figure></p><p>然后配置一下<code>主题配置文件</code>将pace设置成true。<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Progress bar in the top during page loading.</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/theme-next/theme-next-pace</span></span><br><span class="line"><span class="attr">pace:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment"># Themes list:</span></span><br><span class="line"><span class="comment">#pace-theme-big-counter</span></span><br><span class="line"><span class="comment">#pace-theme-bounce</span></span><br><span class="line"><span class="comment">#pace-theme-barber-shop</span></span><br><span class="line"><span class="comment">#pace-theme-center-atom</span></span><br><span class="line"><span class="comment">#pace-theme-center-circle</span></span><br><span class="line"><span class="comment">#pace-theme-center-radar</span></span><br><span class="line"><span class="comment">#pace-theme-center-simple</span></span><br><span class="line"><span class="comment">#pace-theme-corner-indicator</span></span><br><span class="line"><span class="comment">#pace-theme-fill-left</span></span><br><span class="line"><span class="comment">#pace-theme-flash</span></span><br><span class="line"><span class="comment">#pace-theme-loading-bar</span></span><br><span class="line"><span class="comment">#pace-theme-mac-osx</span></span><br><span class="line"><span class="comment">#pace-theme-minimal</span></span><br><span class="line"><span class="comment"># For example</span></span><br><span class="line"><span class="comment"># pace_theme: pace-theme-center-simple</span></span><br><span class="line"><span class="attr">pace_theme:</span> <span class="string">pace-theme-corner-indicator</span></span><br></pre></td></tr></table></figure></p><p>可以从上面的那些里面选一个喜欢的主题，写在pace_theme那里。<br>最近又搞了搞，有第二种方法，更直接，不需要git clone，如下：<br>首先得先把上面pace的位置设置成true，然后那个pace_theme位置填写你喜欢的主题。<br>然后找到<code>主题配置文件</code>中如下位置，这么填cdn。<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Internal version: 1.0.2</span></span><br><span class="line"><span class="comment"># See: https://github.com/HubSpot/pace</span></span><br><span class="line"><span class="comment"># Or use direct links below:</span></span><br><span class="line"><span class="comment"># pace: //cdn.bootcss.com/pace/1.0.2/pace.min.js</span></span><br><span class="line"><span class="comment"># pace_css: //cdn.bootcss.com/pace/1.0.2/themes/blue/pace-theme-flash.min.css</span></span><br><span class="line"><span class="attr">pace:</span> <span class="string">//cdn.bootcss.com/pace/1.0.2/pace.min.js</span></span><br><span class="line"><span class="attr">pace_css:</span> <span class="string">//cdn.bootcss.com/pace/1.0.2/themes/blue/pace-theme-注意替换成一样的主题.min.css</span></span><br></pre></td></tr></table></figure></p><p>注意，你上边填了什么主题，下边也要换成对应的主题。  </p><h1 id="图片放大"><a href="#图片放大" class="headerlink" title="图片放大"></a>图片放大</h1><p>使用fancybox来让博文里面的图片能够点击放大查看。<br>首先需要<code>git clone</code>一下，打开<code>NexT</code>主题目录下的<code>source\lib</code>目录<br>注意，如果这个目录下有fancybox文件夹，需要先删了才行。然后执行下面操作：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/theme-next/theme-next-fancybox3 fancybox</span><br></pre></td></tr></table></figure></p><p>然后配置一下<code>主题配置文件</code>将fancybox设置成true。<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Fancybox. There is support for old version 2 and new version 3.</span></span><br><span class="line"><span class="comment"># Please, choose only any one variant, do not need to install both.</span></span><br><span class="line"><span class="comment"># For install 2.x: https://github.com/theme-next/theme-next-fancybox</span></span><br><span class="line"><span class="comment"># For install 3.x: https://github.com/theme-next/theme-next-fancybox3</span></span><br><span class="line"><span class="attr">fancybox:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></p><p>第二种方法：不需要git clone<br>首先，先把fancy设置成true。<br>然后找到<code>主题配置文件中</code>如下位置： 这么填cdn。<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Internal version: 2.1.5</span></span><br><span class="line"><span class="comment"># See: http://fancyapps.com/fancybox/</span></span><br><span class="line"><span class="attr">fancybox:</span> <span class="string">//cdn.bootcss.com/fancybox/3.2.5/jquery.fancybox.min.js</span></span><br><span class="line"><span class="attr">fancybox_css:</span> <span class="string">//cdn.bootcss.com/fancybox/3.2.5/jquery.fancybox.min.css</span></span><br></pre></td></tr></table></figure></p><h1 id="canvas背景"><a href="#canvas背景" class="headerlink" title="canvas背景"></a>canvas背景</h1><p>设置博客背景之后，就能跟我这个背景一样了。<br>首先需要<code>git clone</code>一下，打开<code>NexT</code>主题目录下的<code>source\lib</code>目录，执行下面操作：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/theme-next/theme-next-canvas-nest canvas-nest</span><br><span class="line">git clone https://github.com/theme-next/theme-next-three three</span><br></pre></td></tr></table></figure></p><p>然后配置一下<code>主题配置文件</code>下面四个选一个true，其他设置成false<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Canvas-nest</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/theme-next/theme-next-canvas-nest</span></span><br><span class="line"><span class="attr">canvas_nest:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># JavaScript 3D library.</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/theme-next/theme-next-three</span></span><br><span class="line"><span class="comment"># three_waves</span></span><br><span class="line"><span class="attr">three_waves:</span> <span class="literal">false</span></span><br><span class="line"><span class="comment"># canvas_lines</span></span><br><span class="line"><span class="attr">canvas_lines:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment"># canvas_sphere</span></span><br><span class="line"><span class="attr">canvas_sphere:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure></p><p>第二种方法：不需要git clone<br>同样四选一填写true。<br>然后找到<code>主题配置文件</code>中如下位置，这么填cdn。<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Internal version: 1.0.0</span></span><br><span class="line"><span class="comment"># https://github.com/hustcc/canvas-nest.js</span></span><br><span class="line"><span class="attr">canvas_nest:</span> <span class="string">//cdn.bootcss.com/canvas-nest.js/1.0.1/canvas-nest.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Internal version: 1.0.0</span></span><br><span class="line"><span class="comment"># See: https://github.com/theme-next/theme-next-three</span></span><br><span class="line"><span class="comment"># three: //cdn.jsdelivr.net/gh/theme-next/theme-next-three@1.0.0/three.min.js</span></span><br><span class="line"><span class="comment"># three_waves: //cdn.jsdelivr.net/gh/theme-next/theme-next-three@1.0.0/three-waves.min.js</span></span><br><span class="line"><span class="comment"># canvas_lines: //cdn.jsdelivr.net/gh/theme-next/theme-next-three@1.0.0/canvas_lines.min.js</span></span><br><span class="line"><span class="comment"># canvas_sphere: //cdn.jsdelivr.net/gh/theme-next/theme-next-three@1.0.0/canvas_sphere.min.js</span></span><br><span class="line"><span class="attr">three:</span> <span class="string">//cdn.jsdelivr.net/gh/theme-next/theme-next-three@1.0.0/three.min.js</span></span><br><span class="line"><span class="attr">three_waves:</span> <span class="string">//cdn.jsdelivr.net/gh/theme-next/theme-next-three@1.0.0/three-waves.min.js</span></span><br><span class="line"><span class="attr">canvas_lines:</span> <span class="string">//cdn.jsdelivr.net/gh/theme-next/theme-next-three@1.0.0/canvas_lines.min.js</span></span><br><span class="line"><span class="attr">canvas_sphere:</span> <span class="string">//cdn.jsdelivr.net/gh/theme-next/theme-next-three@1.0.0/canvas_sphere.min.js</span></span><br></pre></td></tr></table></figure></p><h1 id="DaoVoice聊天"><a href="#DaoVoice聊天" class="headerlink" title="DaoVoice聊天"></a>DaoVoice聊天</h1><p><a href="/2018/06/30/hexo-next-add-daovoice-contact/">Hexo NexT 添加 DaoVoice 在线聊天</a></p><h1 id="Gitalk评论"><a href="#Gitalk评论" class="headerlink" title="Gitalk评论"></a>Gitalk评论</h1><p><a href="/2018/07/04/hexo-next-gitalk-comments-tutor/">Hexo NexT 添加 Gitalk评论功能</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Hexo的NexT主题的一些功能如何开启。如下：站内搜索功能、站点访客量、站点阅读量、站点总字数、站点总阅读时长、RSS订阅、博文字数、博文阅读时长、博文阅读量、优雅的进度条、点击博文内图片放大、Canvas背景、DaoVoice聊天、Gitalk评论  &lt;/p&gt;
    
    </summary>
    
      <category term="Hexo" scheme="http://yunhao.space/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://yunhao.space/tags/Hexo/"/>
    
      <category term="NexT" scheme="http://yunhao.space/tags/NexT/"/>
    
  </entry>
  
  <entry>
    <title>Git 警告错误 LF will be replaced by CRLF</title>
    <link href="http://yunhao.space/2018/06/29/git-warning-lf-replaced-by-crlf/"/>
    <id>http://yunhao.space/2018/06/29/git-warning-lf-replaced-by-crlf/</id>
    <published>2018-06-29T06:59:18.000Z</published>
    <updated>2019-01-23T05:03:13.357Z</updated>
    
    <content type="html"><![CDATA[<p>我忍了这个问题好久了，每次Hexo d的时候，一大溜这个警告错误，今天查了查，然后知道了到底是什么问题了。mark一下。  </p><a id="more"></a><h1 id="症状"><a href="#症状" class="headerlink" title="症状"></a>症状</h1><p>每次使用git的时候，都会出现这个问题：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">warning: LF will be replaced by CRLF in tags/组合数学/index.html.</span><br><span class="line">The file will have its original line endings in your working directory.</span><br></pre></td></tr></table></figure></p><p>一报一大溜，真的烦。  </p><h1 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h1><p>windows中的换行符为 CRLF，而在Linux下的换行符为LF。所以会给换过来。<br>就是说，我们在<code>工作区</code>的文件中，有的是以LF作为换行符结尾的，然后在添加到<code>暂存区</code>的时候，git会<code>暂存区</code>的LF换成CRLF。然后统一提交时候，都是CRLF换行了。  </p><h1 id="Hexo请看这里"><a href="#Hexo请看这里" class="headerlink" title="Hexo请看这里"></a>Hexo请看这里</h1><p>如果是<code>Hexo d</code>的时候出的这个问题。我就是这个时候出的<br>那么直接禁用转换就好了。不需要删除.git什么的。因为<code>hexo d</code>的时候，他会在<code>.deploy_git</code>文件夹内自动从新生成<code>.git</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config –global core.autocrlf false</span><br></pre></td></tr></table></figure></p><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p>输入下面命令禁用转换。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config –global core.autocrlf false</span><br></pre></td></tr></table></figure></p><p>但是禁用转换之后，必须得把<code>.git</code>删了，然后重新<code>git init</code>一下才行。所以记得保存一下本地的修改什么的。或者push一下。然后：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rm -rf .git</span><br><span class="line">git init</span><br></pre></td></tr></table></figure></p><p>到这就行了。我不太确定是不是只有windows上边才会有这种问题。  </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我忍了这个问题好久了，每次Hexo d的时候，一大溜这个警告错误，今天查了查，然后知道了到底是什么问题了。mark一下。  &lt;/p&gt;
    
    </summary>
    
      <category term="Git" scheme="http://yunhao.space/categories/Git/"/>
    
    
      <category term="Git" scheme="http://yunhao.space/tags/Git/"/>
    
      <category term="Hexo" scheme="http://yunhao.space/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>hexo-leancloud-counter-security 插件 Too many requests 错误</title>
    <link href="http://yunhao.space/2018/06/29/hexo-leancloud-counter-security-too-many-requests-error/"/>
    <id>http://yunhao.space/2018/06/29/hexo-leancloud-counter-security-too-many-requests-error/</id>
    <published>2018-06-29T05:05:13.000Z</published>
    <updated>2019-01-23T05:03:13.357Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>【该问题可能已修复，以下为原文】  </p></blockquote><p>这个插件吧，有点儿不完美，给他改了改，不完美的地方就是，leancloud那边儿没法短时间内接受太多请求。原因是我用的是免费版的，有限制，而hexo-leancloud-counter-security 插件每次发太多无用请求，总是会报429错误，我就给源代码改了改。  </p><a id="more"></a><h1 id="症状"><a href="#症状" class="headerlink" title="症状"></a>症状</h1><p>如果你懒得看解释的话，直接去看修改代码一节。<br>每次进行<code>hexo d</code>的时候会概率性的出现如下错误：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ERROR Too many requests. [429 POST https://xtppdvlr.api.lncld.net/1.1/classes/Counter]</span><br><span class="line">Error: Too many requests. [429 POST https://xtppdvlr.api.lncld.net/1.1/classes/Counter]</span><br><span class="line">    at E:\code\blog\node_modules\leancloud-storage\dist\node\request.js:163:17</span><br><span class="line">    at tryCatch (E:\code\blog\node_modules\es6-promise\dist\es6-promise.js:410:12)</span><br><span class="line">    at invokeCallback (E:\code\blog\node_modules\es6-promise\dist\es6-promise.js:425:13)</span><br><span class="line">    at publish (E:\code\blog\node_modules\es6-promise\dist\es6-promise.js:399:7)</span><br><span class="line">    at publishRejection (E:\code\blog\node_modules\es6-promise\dist\es6-promise.js:340:3)</span><br><span class="line">    at flush (E:\code\blog\node_modules\es6-promise\dist\es6-promise.js:128:5)</span><br><span class="line">    at _combinedTickCallback (internal/process/next_tick.js:131:7)</span><br><span class="line">    at process._tickCallback (internal/process/next_tick.js:180:9)</span><br></pre></td></tr></table></figure></p><p>官方解释如下：  </p><blockquote><p>信息 - Too many requests.<br>含义 - 超过应用的流控限制，即超过每个应用同一时刻最多可使用的工作线程数，或者说同一时刻最多可以同时处理的数据请求。通过 控制台 &gt; 存储 &gt; API 统计 &gt; API 性能 &gt; 总览 可以查看应用产生的请求统计数据，如平均工作线程、平均响应时间等。使用 LeanCloud 商用版或企业版 的用户，如有需要，可以联系我们来调整工作线程数。</p></blockquote><h1 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h1><p>我查看了源代码，<code>node_modules\hexo-leancloud-counter-security\index.js</code>这个就是源代码。发现每次进行hexo d的时候，他对每个博文的title和url，向leancloud发送一次查询请求，如果发现leancloud那边儿没有该条记录的话，那么再发送一条插入请求。<br>原逻辑如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">_.forEach(urls, <span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> query = <span class="keyword">new</span> AV.Query(<span class="string">'Counter'</span>);</span><br><span class="line">    query.equalTo(<span class="string">'url'</span>, x.url);</span><br><span class="line">    query.count().then(<span class="function"><span class="keyword">function</span> (<span class="params">count</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (count === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> counter = <span class="keyword">new</span> Counter();</span><br><span class="line">            counter.set(<span class="string">'url'</span>, x.url);</span><br><span class="line">            counter.set(<span class="string">'title'</span>, x.title);</span><br><span class="line">            counter.set(<span class="string">'time'</span>, <span class="number">0</span>);</span><br><span class="line">            counter.save().then(<span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123;</span><br><span class="line">                log.info(x.title + <span class="string">' is saved as: '</span> + obj.id);</span><br><span class="line">            &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">                log.error(error);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">        log.error(error);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>也就是说，每一次<code>hexo d</code>的时候最少的查询次数等于你的博文个数。如果你的leancloud的应用的处理能力不够强大的时候，对于这种高强度的请求，当然会出现Too Many Requests的错误代码。  </p><h1 id="改进思路"><a href="#改进思路" class="headerlink" title="改进思路"></a>改进思路</h1><p>我们要做的就是较少不必要的请求咯。<br>本地记录一个title和url的json数组，每次查询这个数组，看看哪些是真正的需要查询的，然后再去查询leancloud。其实可以这样理解，这个本地的数组存储就是leancloud的远程数据库表。<br>因为筛除了一些记录，所以每次hexo d时的请求数量仅仅是相比上一次hexo d时候的增量。  </p><h1 id="修改代码"><a href="#修改代码" class="headerlink" title="修改代码"></a>修改代码</h1><p>如果你遇到了问题，看看问题解决一节。<br>修改的是<code>node_modules\hexo-leancloud-counter-security\index.js</code>这个文件<br>hexo-leancloud-counter-security版本是1.3.2<br>一共修改下面几处，在代码中已经做了标记。<br>代码70-84<br>代码87-102<br>代码113-117<br>代码120-123<br>代码126-132<br>代码135-138<br>代码140-142<br>代码225-268<br>改完了之后别着急，打开<code>博客配置文件</code>找到<code>skip_render:</code>这一项，然后加上leancloud_memo.json。不会加的看修改博客配置文件一节。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> _regenerator = <span class="built_in">require</span>(<span class="string">'babel-runtime/regenerator'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> _regenerator2 = _interopRequireDefault(_regenerator);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> _asyncToGenerator2 = <span class="built_in">require</span>(<span class="string">'babel-runtime/helpers/asyncToGenerator'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> _stringify = <span class="built_in">require</span>(<span class="string">'babel-runtime/core-js/json/stringify'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> _stringify2 = _interopRequireDefault(_stringify);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sync = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> _ref = (<span class="number">0</span>, _asyncToGenerator3.default)( <span class="comment">/*#__PURE__*/</span>_regenerator2.default.mark(<span class="function"><span class="keyword">function</span> _callee(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> log, config, APP_ID, APP_KEY, publicDir, UrlsFile, urls, currentUser, userName, passWord, Counter;</span><br><span class="line">        <span class="keyword">return</span> _regenerator2.default.wrap(<span class="function"><span class="keyword">function</span> _callee$(<span class="params">_context</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">switch</span> (_context.prev = _context.next) &#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                        log = <span class="keyword">this</span>.log;</span><br><span class="line">                        config = <span class="keyword">this</span>.config;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span> (!config.leancloud_counter_security.enable_sync) &#123;</span><br><span class="line">                            _context.next = <span class="number">19</span>;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        APP_ID = config.leancloud_counter_security.app_id;</span><br><span class="line">                        APP_KEY = config.leancloud_counter_security.app_key;</span><br><span class="line">                        publicDir = <span class="keyword">this</span>.public_dir;</span><br><span class="line">                        UrlsFile = pathFn.join(publicDir, <span class="string">'leancloud_counter_security_urls.json'</span>);</span><br><span class="line">                        urls = <span class="built_in">JSON</span>.parse(fs.readFileSync(UrlsFile, <span class="string">'utf8'</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                        AV.init(&#123;</span><br><span class="line">                            appId: APP_ID,</span><br><span class="line">                            appKey: APP_KEY</span><br><span class="line">                        &#125;);</span><br><span class="line"></span><br><span class="line">                        currentUser = AV.User.current();</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span> (currentUser) &#123;</span><br><span class="line">                            _context.next = <span class="number">16</span>;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        userName = config.leancloud_counter_security.username;</span><br><span class="line">                        passWord = config.leancloud_counter_security.password;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span> (!userName) &#123;</span><br><span class="line">                            userName = readlineSync.question(<span class="string">'Enter your username: '</span>);</span><br><span class="line">                            passWord = readlineSync.question(<span class="string">'Enter your password: '</span>, &#123; <span class="attr">hideEchoBack</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!passWord) &#123;</span><br><span class="line">                            passWord = readlineSync.question(<span class="string">'Enter your password: '</span>, &#123; <span class="attr">hideEchoBack</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">                        &#125;</span><br><span class="line">                        _context.next = <span class="number">16</span>;</span><br><span class="line">                        <span class="keyword">return</span> AV.User.logIn(userName, passWord).then(<span class="function"><span class="keyword">function</span> (<span class="params">loginedUser</span>) </span>&#123;</span><br><span class="line">                            log.info(<span class="string">'Logined as: '</span> + loginedUser.getUsername());</span><br><span class="line">                        &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">                            log.error(error);</span><br><span class="line">                        &#125;);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">case</span> <span class="number">16</span>:</span><br><span class="line"></span><br><span class="line">                        log.info(<span class="string">'Now syncing your posts list to leancloud counter...'</span>);</span><br><span class="line">                        Counter = AV.Object.extend(<span class="string">'Counter'</span>);</span><br><span class="line">                        </span><br><span class="line">                        <span class="comment">//----add----</span></span><br><span class="line">                        urls.sort(cmp);</span><br><span class="line">                        </span><br><span class="line">                        <span class="keyword">var</span> memoFile = pathFn.join(publicDir, <span class="string">"leancloud_memo.json"</span>);</span><br><span class="line">                        <span class="keyword">if</span>(!fs.existsSync(memoFile))&#123;</span><br><span class="line">                            fs.writeFileSync(memoFile, <span class="string">"[\n]"</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">var</span> memoData = fs.readFileSync(memoFile, <span class="string">"utf-8"</span>).split(<span class="string">"\n"</span>);</span><br><span class="line">                        <span class="keyword">var</span> memoIdx = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">var</span> newData = [];</span><br><span class="line">                        <span class="keyword">var</span> cnt = <span class="number">0</span>;</span><br><span class="line">                        <span class="keyword">var</span> limit = <span class="number">0</span>;</span><br><span class="line">                        <span class="keyword">var</span> env = <span class="keyword">this</span>;</span><br><span class="line">                        <span class="comment">//----end----</span></span><br><span class="line">                        </span><br><span class="line">                        _.forEach(urls, <span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">                            <span class="comment">//----add----</span></span><br><span class="line">                            <span class="keyword">var</span> y = &#123;&#125;;</span><br><span class="line">                            y.title = <span class="string">""</span>;</span><br><span class="line">                            y.url = <span class="string">""</span>;</span><br><span class="line">                            </span><br><span class="line">                            <span class="keyword">var</span> flag = <span class="literal">false</span>;</span><br><span class="line">                            <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">                                <span class="keyword">if</span>(memoData[memoIdx] == <span class="string">']'</span>) <span class="keyword">break</span>;</span><br><span class="line">                                y = <span class="built_in">JSON</span>.parse(memoData[memoIdx].substring(<span class="number">0</span>, memoData[memoIdx].length<span class="number">-1</span>));</span><br><span class="line"><span class="keyword">if</span>(y.url &gt; x.url) <span class="keyword">break</span>;</span><br><span class="line">                                <span class="keyword">if</span>(y.url == x.url &amp;&amp; y.title == x.title)&#123;</span><br><span class="line">                                    flag = <span class="literal">true</span>;</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                                memoIdx++;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">if</span>(!flag) &#123;</span><br><span class="line">                                log.info(<span class="string">"Dealing with record of "</span> + x.title);</span><br><span class="line">                                limit++;</span><br><span class="line">                                <span class="comment">//----end----</span></span><br><span class="line">                                <span class="keyword">var</span> query = <span class="keyword">new</span> AV.Query(<span class="string">'Counter'</span>);</span><br><span class="line">                                query.equalTo(<span class="string">'url'</span>, x.url);</span><br><span class="line">                                query.count().then(<span class="function"><span class="keyword">function</span> (<span class="params">count</span>) </span>&#123;</span><br><span class="line">                                    <span class="keyword">if</span> (count === <span class="number">0</span>) &#123;</span><br><span class="line">                                        <span class="keyword">var</span> counter = <span class="keyword">new</span> Counter();</span><br><span class="line">                                        counter.set(<span class="string">'url'</span>, x.url);</span><br><span class="line">                                        counter.set(<span class="string">'title'</span>, x.title);</span><br><span class="line">                                        counter.set(<span class="string">'time'</span>, <span class="number">0</span>);</span><br><span class="line">                                        counter.save().then(<span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123;</span><br><span class="line">                                            log.info(x.title + <span class="string">' is saved as: '</span> + obj.id);</span><br><span class="line">                                            <span class="comment">//----add----</span></span><br><span class="line">                                            newData.push(x);</span><br><span class="line">                                            cnt++;</span><br><span class="line">                                            postOperation(env, cnt, limit, newData, memoData);</span><br><span class="line">                                            <span class="comment">//----end----</span></span><br><span class="line">                                        &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">                                            log.error(error);</span><br><span class="line">                                            <span class="comment">//----add----</span></span><br><span class="line">                                            cnt++;</span><br><span class="line">                                            postOperation(env, cnt, limit, newData, memoData);</span><br><span class="line">                                            <span class="comment">//----end----</span></span><br><span class="line">                                        &#125;);</span><br><span class="line">                                    &#125;</span><br><span class="line">                                    <span class="comment">//----add----</span></span><br><span class="line">                                    <span class="keyword">else</span>&#123;</span><br><span class="line">                                        newData.push(x);</span><br><span class="line">                                        cnt++;</span><br><span class="line">                                        postOperation(env, cnt, limit, newData, memoData);</span><br><span class="line">                                    &#125;</span><br><span class="line">                                    <span class="comment">//----end----</span></span><br><span class="line">                                &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">                                    log.error(error);</span><br><span class="line">                                    <span class="comment">//----add----</span></span><br><span class="line">                                    cnt++;</span><br><span class="line">                                    postOperation(env, cnt, limit, newData, memoData);</span><br><span class="line">                                    <span class="comment">//----end----</span></span><br><span class="line">                                &#125;);</span><br><span class="line">                            <span class="comment">//----add----</span></span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="comment">//----end----</span></span><br><span class="line">                        &#125;);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">case</span> <span class="number">19</span>:</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">'end'</span>:</span><br><span class="line">                        <span class="keyword">return</span> _context.stop();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, _callee, <span class="keyword">this</span>);</span><br><span class="line">    &#125;));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">sync</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> _ref.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> _interopRequireDefault(<span class="params">obj</span>) </span>&#123; <span class="keyword">return</span> obj &amp;&amp; obj.__esModule ? obj : &#123; <span class="attr">default</span>: obj &#125;; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> AV = <span class="built_in">require</span>(<span class="string">'leancloud-storage'</span>);</span><br><span class="line"><span class="keyword">var</span> _ = <span class="built_in">require</span>(<span class="string">'lodash'</span>);</span><br><span class="line"><span class="keyword">var</span> readlineSync = <span class="built_in">require</span>(<span class="string">'readline-sync'</span>);</span><br><span class="line"><span class="keyword">var</span> packageInfo = <span class="built_in">require</span>(<span class="string">'./package.json'</span>);</span><br><span class="line"><span class="keyword">var</span> pathFn = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">generate_post_list</span>(<span class="params">locals</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> config = <span class="keyword">this</span>.config;</span><br><span class="line">    <span class="keyword">if</span> (config.leancloud_counter_security.enable_sync) &#123;</span><br><span class="line">        <span class="keyword">var</span> urlsPath = <span class="string">'leancloud_counter_security_urls.json'</span>;</span><br><span class="line">        <span class="keyword">var</span> urls = [].concat(locals.posts.toArray()).filter(<span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> x.published;</span><br><span class="line">        &#125;).map(<span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> &#123; <span class="attr">title</span>: x.title, <span class="attr">url</span>: <span class="string">'/'</span> + x.path &#125;;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            path: urlsPath,</span><br><span class="line">            data: (<span class="number">0</span>, _stringify2.default)(urls)</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">hexo.extend.generator.register(<span class="string">'leancloud_counter_security_generator'</span>, generate_post_list);</span><br><span class="line"></span><br><span class="line">hexo.extend.deployer.register(<span class="string">'leancloud_counter_security_sync'</span>, sync);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> commandOptions = &#123;</span><br><span class="line">    desc: packageInfo.description,</span><br><span class="line">    usage: <span class="string">' &lt;argument&gt;'</span>,</span><br><span class="line">    <span class="string">'arguments'</span>: [&#123;</span><br><span class="line">        <span class="string">'name'</span>: <span class="string">'register | r &lt;username&gt; &lt;password&gt;'</span>,</span><br><span class="line">        <span class="string">'desc'</span>: <span class="string">'Register a new user.'</span></span><br><span class="line">    &#125;]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">commandFunc</span>(<span class="params">args</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> log = <span class="keyword">this</span>.log;</span><br><span class="line">    <span class="keyword">var</span> config = <span class="keyword">this</span>.config;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (args._.length !== <span class="number">3</span>) &#123;</span><br><span class="line">        log.error(<span class="string">'Too Few or Many Arguments.'</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (args._[<span class="number">0</span>] === <span class="string">'register'</span> || args._[<span class="number">0</span>] === <span class="string">'r'</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> APP_ID = config.leancloud_counter_security.app_id;</span><br><span class="line">        <span class="keyword">var</span> APP_KEY = config.leancloud_counter_security.app_key;</span><br><span class="line">        AV.init(&#123;</span><br><span class="line">            appId: APP_ID,</span><br><span class="line">            appKey: APP_KEY</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> user = <span class="keyword">new</span> AV.User();</span><br><span class="line">        user.setUsername(<span class="built_in">String</span>(args._[<span class="number">1</span>]));</span><br><span class="line">        user.setPassword(<span class="built_in">String</span>(args._[<span class="number">2</span>]));</span><br><span class="line">        user.signUp().then(<span class="function"><span class="keyword">function</span> (<span class="params">loginedUser</span>) </span>&#123;</span><br><span class="line">            log.info(loginedUser.getUsername() + <span class="string">' is successfully signed up'</span>);</span><br><span class="line">        &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">            log.error(error);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        log.error(<span class="string">'Unknown Command.'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">hexo.extend.console.register(<span class="string">'lc-counter'</span>, <span class="string">'hexo-leancloud-counter-security'</span>, commandOptions, commandFunc);</span><br><span class="line"></span><br><span class="line"><span class="comment">//----add----</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cmp</span>(<span class="params">x, y</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x.url &lt; y.url)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(x.url == y.url)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> postOperation = <span class="function"><span class="keyword">function</span> (<span class="params">env, cnt, limit, newData, memoData</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(cnt == limit)&#123;</span><br><span class="line">        <span class="keyword">var</span> log = env.log;</span><br><span class="line">        newData.sort(cmp);</span><br><span class="line">        <span class="keyword">var</span> sourceDir = env.source_dir;</span><br><span class="line">        <span class="keyword">var</span> publicDir = env.public_dir;</span><br><span class="line">        <span class="keyword">var</span> memoFile = pathFn.join(sourceDir, <span class="string">"leancloud_memo.json"</span>);</span><br><span class="line">        fs.writeFileSync(memoFile, <span class="string">"[\n"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">var</span> memoIdx = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; newData[i]; i++)&#123;</span><br><span class="line">            <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(memoData[memoIdx] == <span class="string">']'</span>) <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">var</span> y = <span class="built_in">JSON</span>.parse(memoData[memoIdx].substring(<span class="number">0</span>, memoData[memoIdx].length<span class="number">-1</span>));</span><br><span class="line">                <span class="keyword">if</span>(y.url &gt; newData[i].url) <span class="keyword">break</span>;</span><br><span class="line">                </span><br><span class="line">                fs.writeFileSync(memoFile, memoData[memoIdx] + <span class="string">"\n"</span>, &#123;<span class="string">'flag'</span>:<span class="string">'a'</span>&#125;);</span><br><span class="line">                memoIdx++;</span><br><span class="line">            &#125;</span><br><span class="line">            fs.writeFileSync(memoFile, <span class="string">"&#123;\"title\":\""</span> + newData[i].title + <span class="string">"\",\"url\":\""</span> + newData[i].url + <span class="string">"\"&#125;,\n"</span>, &#123;<span class="string">'flag'</span>:<span class="string">'a'</span>&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(memoData[memoIdx] != <span class="string">']'</span>)&#123;</span><br><span class="line">            fs.writeFileSync(memoFile, memoData[memoIdx] + <span class="string">"\n"</span>, &#123;<span class="string">'flag'</span>:<span class="string">'a'</span>&#125;);</span><br><span class="line">            memoIdx++;</span><br><span class="line">        &#125;</span><br><span class="line">        fs.writeFileSync(memoFile, memoData[memoIdx], &#123;<span class="string">'flag'</span>:<span class="string">'a'</span>&#125;);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">var</span> srcFile = pathFn.join(sourceDir, <span class="string">"leancloud_memo.json"</span>);</span><br><span class="line">        <span class="keyword">var</span> destFile = pathFn.join(publicDir, <span class="string">"leancloud_memo.json"</span>);</span><br><span class="line">        <span class="keyword">var</span> readStream = fs.createReadStream(srcFile);</span><br><span class="line">        <span class="keyword">var</span> writeStream = fs.createWriteStream(destFile);</span><br><span class="line">        readStream.pipe(writeStream);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"leancloud_memo.json successfully updated."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="修改博客配置文件"><a href="#修改博客配置文件" class="headerlink" title="修改博客配置文件"></a>修改博客配置文件</h1><p>我们需要将leancloud_memo.json排除，否则的话会被渲染，我那个反正就是被渲染了。<br>在<code>博客配置文件</code>中找到这个，然后加一项，如下：<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">skip_render:</span> <span class="string">leancloud_memo.json</span></span><br></pre></td></tr></table></figure></p><p>如果有多个项的话，可以这么加：<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">skip_render:</span> </span><br><span class="line"><span class="bullet">  -</span> <span class="number">404.</span><span class="string">html</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">README.md</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">leancloud_memo.json</span></span><br></pre></td></tr></table></figure></p><h1 id="关键逻辑"><a href="#关键逻辑" class="headerlink" title="关键逻辑"></a>关键逻辑</h1><p>维护memoData和urls数组有序，能够在O(2n)的复杂度内判断出有哪些博文（包括改了题目的，改了文件名的）不在表中。<br>最后的memoData和newData也是有序的，产生的新的文件也是有序的。<br>详见代码，不做过多解释。  </p><h1 id="额外代价"><a href="#额外代价" class="headerlink" title="额外代价"></a>额外代价</h1><p>分析一下，额外引入的代价。<br>时间上的代价：  </p><ul><li>对urls数组进行排序。O(nlogn)  </li><li>urls数组和memoData数组比较以确定某个记录需要向leancloud查询。O(2n)  </li><li>排序newData数组。O(nlogn)  </li><li>将memoData和newData数组整合成一个新的数组。O(2n)  </li><li>将memoData字符串split成数组一次。  </li><li>读取memoData一次。  </li><li>写memoData n次。  </li><li>拷贝memoData一次。  </li></ul><p>空间上的代价：  </p><ul><li>引入newData数组，O(n)  </li><li>引入memoData数组，O(n)  </li><li>引入一个文件leancloud_memo.json  </li></ul><p>n是博文的数量，一般的话假设有1万篇，这个额外代价感觉还可以。  </p><h1 id="最后一行不加注释"><a href="#最后一行不加注释" class="headerlink" title="最后一行不加注释"></a>最后一行不加注释</h1><p>为什么不在上面代码最后艺一行加上//—-end—-？因为加上注释以后会报错。报错如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">ERROR Plugin load failed: hexo-leancloud-counter-security</span><br><span class="line">E:\code\blog\node_modules\hexo-leancloud-counter-security\index.js:213</span><br><span class="line">&#125;</span><br><span class="line">^</span><br><span class="line"></span><br><span class="line">SyntaxError: Unexpected end of input</span><br><span class="line">    at createScript (vm.js:80:10)</span><br><span class="line">    at Object.runInThisContext (vm.js:139:10)</span><br><span class="line">    at fs.readFile.then.script (E:\code\blog\node_modules\hexo\lib\hexo\index.js:230:19)</span><br><span class="line">    at tryCatcher (E:\code\blog\node_modules\bluebird\js\release\util.js:16:23)</span><br><span class="line">    at Promise._settlePromiseFromHandler (E:\code\blog\node_modules\bluebird\js\release\promise.js:512:31)</span><br><span class="line">    at Promise._settlePromise (E:\code\blog\node_modules\bluebird\js\release\promise.js:569:18)</span><br><span class="line">    at Promise._settlePromise0 (E:\code\blog\node_modules\bluebird\js\release\promise.js:614:10)</span><br><span class="line">    at Promise._settlePromises (E:\code\blog\node_modules\bluebird\js\release\promise.js:693:18)</span><br><span class="line">    at Promise._fulfill (E:\code\blog\node_modules\bluebird\js\release\promise.js:638:18)</span><br><span class="line">    at Promise._resolveCallback (E:\code\blog\node_modules\bluebird\js\release\promise.js:432:57)</span><br><span class="line">    at Promise._settlePromiseFromHandler (E:\code\blog\node_modules\bluebird\js\release\promise.js:524:17)</span><br><span class="line">    at Promise._settlePromise (E:\code\blog\node_modules\bluebird\js\release\promise.js:569:18)</span><br><span class="line">    at Promise._settlePromise0 (E:\code\blog\node_modules\bluebird\js\release\promise.js:614:10)</span><br><span class="line">    at Promise._settlePromises (E:\code\blog\node_modules\bluebird\js\release\promise.js:693:18)</span><br><span class="line">    at Promise._fulfill (E:\code\blog\node_modules\bluebird\js\release\promise.js:638:18)</span><br><span class="line">    at E:\code\blog\node_modules\bluebird\js\release\nodeback.js:42:21</span><br><span class="line">    at E:\code\blog\node_modules\graceful-fs\graceful-fs.js:78:16</span><br><span class="line">    at FSReqWrap.readFileAfterClose [as oncomplete] (fs.js:511:3)</span><br><span class="line">ERROR Deployer not found: leancloud_counter_security_sync</span><br></pre></td></tr></table></figure></p><h1 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h1><p>如果你在<code>hexo d</code>的时候，发现leancloud那边儿没有添加上记录。排除了各种错误之后，还是没有的话。<br>你可以把source文件夹下的leancloud_memo.json文件删除，然后重新<code>hexo clean &amp; hexo g &amp; hexo d</code>就好了。  </p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;【该问题可能已修复，以下为原文】  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这个插件吧，有点儿不完美，给他改了改，不完美的地方就是，leancloud那边儿没法短时间内接受太多请求。原因是我用的是免费版的，有限制，而hexo-leancloud-counter-security 插件每次发太多无用请求，总是会报429错误，我就给源代码改了改。  &lt;/p&gt;
    
    </summary>
    
      <category term="Hexo" scheme="http://yunhao.space/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://yunhao.space/tags/Hexo/"/>
    
      <category term="LeanCloud" scheme="http://yunhao.space/tags/LeanCloud/"/>
    
  </entry>
  
  <entry>
    <title>Hexo NexT 主题 LeanCloud 插件安装教程</title>
    <link href="http://yunhao.space/2018/06/27/hexo-leancloud-plugin-installation-tutor/"/>
    <id>http://yunhao.space/2018/06/27/hexo-leancloud-plugin-installation-tutor/</id>
    <published>2018-06-27T13:13:51.000Z</published>
    <updated>2019-01-23T05:03:13.357Z</updated>
    
    <content type="html"><![CDATA[<p>记录一次大折腾。LeanCLoud这个是记录单篇博文阅读量的一个东西，之前配过一次，没这么难，这次学习了之后，发现这个东西还是挺麻烦的。多配几次就不麻烦了。mark一下。  </p><a id="more"></a><h1 id="LeanCloud"><a href="#LeanCloud" class="headerlink" title="LeanCloud"></a>LeanCloud</h1><p>LeanCloud能够给每篇博客统计访问量的工具。<br>首先注册，并登陆<a href="https://leancloud.cn" target="_blank" rel="noopener">LeanCloud</a>。<br>注意：登陆密码要求还得有大写英文字母，小写英文字母，还有数字。  </p><h1 id="膜拜大佬"><a href="#膜拜大佬" class="headerlink" title="膜拜大佬"></a>膜拜大佬</h1><p>这篇博客是学习两位大佬，<a href="https://notes.wanghao.work/2015-10-21-%E4%B8%BANexT%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E6%96%87%E7%AB%A0%E9%98%85%E8%AF%BB%E9%87%8F%E7%BB%9F%E8%AE%A1%E5%8A%9F%E8%83%BD.html#%E9%85%8D%E7%BD%AELeanCloud" target="_blank" rel="noopener">DoubleMine</a>和<a href="https://leaferx.online/2018/02/11/lc-security/" target="_blank" rel="noopener">leaferx</a>，的博文之后写的  </p><h1 id="应用配置"><a href="#应用配置" class="headerlink" title="应用配置"></a>应用配置</h1><p>进入控制台后，我们先创建一个应用。点击创建应用<br><img src="https://images.yunhao.space/pica/hexo-leancloud-plugin-installation-tutor/1.png" alt="创建应用"><br>然后弹出如下窗口：起名字，选择开发版，之后点击创建按钮<br><img src="https://images.yunhao.space/pica/hexo-leancloud-plugin-installation-tutor/2.png" alt="创建应用"><br>创建完之后，我们看到下面这样。然后点击右上角的设置<br><img src="https://images.yunhao.space/pica/hexo-leancloud-plugin-installation-tutor/3.png" alt="应用设置"><br>进入之后，我们点击存储，创建Class，弹出的对话框中名字要写<code>Counter</code>，必须写Counter是因为需要和NexT主题兼容。然后ACL权限选择无限制，不然容易统计次数不正常。最后点击创建Class按钮。<br><img src="https://images.yunhao.space/pica/hexo-leancloud-plugin-installation-tutor/4.png" alt="创建Class"><br>创建Class的时候容易出现这个问题，如下图，刷新几次，就好了。<br><img src="https://images.yunhao.space/pica/hexo-leancloud-plugin-installation-tutor/5.png" alt="问题"><br>现在获取应用ID和应用Key。设置，应用key。<br><img src="https://images.yunhao.space/pica/hexo-leancloud-plugin-installation-tutor/6.png" alt="ID和Key"></p><h1 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h1><p>我们把LeanCloud的应用ID和应用Key写到<code>主题配置文件</code>中了，注意此时是<code>主题的配置文件config.yml</code>，找到文件中对应位置，并修改成如下：<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Show number of visitors to each article.</span></span><br><span class="line"><span class="comment"># You can visit https://leancloud.cn get AppID and AppKey.</span></span><br><span class="line"><span class="attr">leancloud_visitors:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  app_id:</span> <span class="string">填写</span></span><br><span class="line"><span class="attr">  app_key:</span> <span class="string">填写</span></span><br><span class="line">  <span class="comment"># Dependencies: https://github.com/theme-next/hexo-leancloud-counter-security</span></span><br><span class="line">  <span class="comment"># If you don't care about security in lc counter and just want to use it directly</span></span><br><span class="line">  <span class="comment"># (without hexo-leancloud-counter-security plugin), set the `security` to `false`.</span></span><br><span class="line"><span class="attr">  security:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  betterPerformance:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></p><p>enable写成true。把<code>app_id</code>和<code>app_key</code>填上去。然后注意下面，如果没有安装hexo-leancloud-counter-security插件的话，security就填写false。betterPerformance是能够让阅读次数加载更快一些，但是显示的实际数值可能不够准确。<br>配置完了之后，<code>hexo d</code>一下，然后看看是否生效。之前的话应该就能生效了，但是现在好像不行了。如果不能生效请继续看。  </p><h1 id="Counter类未初始化问题"><a href="#Counter类未初始化问题" class="headerlink" title="Counter类未初始化问题"></a>Counter类未初始化问题</h1><p>如果你看到这里了，应该就是发现，计数功能无效。可能会出现下面的问题。Counter类未初始化。<br><img src="https://images.yunhao.space/pica/hexo-leancloud-plugin-installation-tutor/7.png" alt="Counter类未初始化"><br>然后它提示我们看F12的Console，显示信息如下：<br><img src="https://images.yunhao.space/pica/hexo-leancloud-plugin-installation-tutor/8.png" alt="F12Console"></p><h1 id="hexo-leancloud-counter-security插件的安装与配置"><a href="#hexo-leancloud-counter-security插件的安装与配置" class="headerlink" title="hexo-leancloud-counter-security插件的安装与配置"></a>hexo-leancloud-counter-security插件的安装与配置</h1><p>打开<code>主题配置文件</code>，确保刚刚的那个security已经设置为true。如下：<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Show number of visitors to each article.</span></span><br><span class="line"><span class="comment"># You can visit https://leancloud.cn get AppID and AppKey.</span></span><br><span class="line"><span class="attr">leancloud_visitors:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  app_id:</span> <span class="string">填写</span></span><br><span class="line"><span class="attr">  app_key:</span> <span class="string">填写</span></span><br><span class="line">  <span class="comment"># Dependencies: https://github.com/theme-next/hexo-leancloud-counter-security</span></span><br><span class="line">  <span class="comment"># If you don't care about security in lc counter and just want to use it directly</span></span><br><span class="line">  <span class="comment"># (without hexo-leancloud-counter-security plugin), set the `security` to `false`.</span></span><br><span class="line"><span class="attr">  security:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  betterPerformance:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></p><p>打开CMD，然后切换到博客的根目录。执行下面命令，以安装hexo-leancloud-counter-security插件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-leancloud-counter-security --save</span><br></pre></td></tr></table></figure></p><p>等待安装结束之后，我们注册一个用户。命令如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo lc-counter r 用户名 密码</span><br></pre></td></tr></table></figure></p><p>用户名，密码两处用你自己起好的名字和密码替换。不用和LeanCloud的登陆名和登陆密码一样。这个用于deploy的时候输入。<br>然后打开<code>博客配置文件</code>。注意是博客的配置文件。<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">leancloud_counter_security:</span></span><br><span class="line"><span class="attr">  enable_sync:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  app_id:</span> <span class="string">&lt;&lt;your</span> <span class="string">app</span> <span class="string">id&gt;&gt;</span></span><br><span class="line"><span class="attr">  app_key:</span> <span class="string">&lt;&lt;your</span> <span class="string">app</span> <span class="string">key&gt;</span></span><br><span class="line"><span class="attr">  username:</span> <span class="string">&lt;&lt;your</span> <span class="string">username&gt;&gt;</span> <span class="comment">#如留空则将在部署时询问</span></span><br><span class="line"><span class="attr">  password:</span> <span class="string">&lt;&lt;your</span> <span class="string">password&gt;&gt;</span> <span class="comment">#建议留空以保证安全性，如留空则将在部署时询问</span></span><br></pre></td></tr></table></figure></p><p>然后在<code>博客配置文件</code>中找到<code>deploy:</code>，在deploy下边添加一个。如下：<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  - type:</span> <span class="string">leancloud_counter_security_sync</span></span><br></pre></td></tr></table></figure></p><p>之后去LeanCloud查看_User表中是否已经添加刚才的用户，点击存储，_User，看是否多一条记录，如下：<br><img src="https://images.yunhao.space/pica/hexo-leancloud-plugin-installation-tutor/9.png" alt="查看用户"><br>然后对Counter表设置权限，点击存储，Counter，其他，权限设置。如下：<br><img src="https://images.yunhao.space/pica/hexo-leancloud-plugin-installation-tutor/10.png" alt="设置权限"><br>然后弹出对话框，点击add_fields，指定用户，输入刚才用户，点击添加，<br><img src="https://images.yunhao.space/pica/hexo-leancloud-plugin-installation-tutor/11.png" alt="add_fields权限"><br>添加成功能够看到两处不同，用户ID已经上去了。<br><img src="https://images.yunhao.space/pica/hexo-leancloud-plugin-installation-tutor/12.png" alt="添加成功"><br>接下来，我们同样对create进行指定用户。<br><img src="https://images.yunhao.space/pica/hexo-leancloud-plugin-installation-tutor/13.png" alt="create权限"><br>然后，对delete指定用户，这个注意，不添加任何用户。然后关闭。<br><img src="https://images.yunhao.space/pica/hexo-leancloud-plugin-installation-tutor/14.png" alt="delete权限"><br>这就设置好了。每次运行<code>hexo d</code>的时候，会扫描所有的博客，对于新的博客，Counter表里没有记录的时候，会新建一条记录。如果博客的配置文件中username和password那块儿留空的话，hexo d的时候需要手动输入密码。<br>然后我们<code>hexo d</code>一下。看看效果。  </p><h1 id="同时部署git和leancloud的问题"><a href="#同时部署git和leancloud的问题" class="headerlink" title="同时部署git和leancloud的问题"></a>同时部署git和leancloud的问题</h1><p>如果没出现这个问题，就跳过这一节<br>如果你的<code>博客配置文件</code>中的deploy已经有一个git的了，那么可能会出现下边的问题。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">FATAL bad indentation of a mapping entry at line 86, column 3:</span><br><span class="line">      - type: leancloud_counter_securi ...</span><br><span class="line">      ^</span><br><span class="line">YAMLException: bad indentation of a mapping entry at line 86, column 3:</span><br><span class="line">      - type: leancloud_counter_securi ...</span><br><span class="line">      ^</span><br><span class="line">    at generateError (E:\code\blog\node_modules\js-yaml\lib\js-yaml\loader.js:165:10)</span><br><span class="line">    at throwError (E:\code\blog\node_modules\js-yaml\lib\js-yaml\loader.js:171:9)</span><br><span class="line">    at readBlockMapping (E:\code\blog\node_modules\js-yaml\lib\js-yaml\loader.js:1080:7)</span><br><span class="line">    at composeNode (E:\code\blog\node_modules\js-yaml\lib\js-yaml\loader.js:1332:12)</span><br><span class="line">    at readDocument (E:\code\blog\node_modules\js-yaml\lib\js-yaml\loader.js:1492:3)</span><br><span class="line">    at loadDocuments (E:\code\blog\node_modules\js-yaml\lib\js-yaml\loader.js:1548:5)</span><br><span class="line">    at Object.load (E:\code\blog\node_modules\js-yaml\lib\js-yaml\loader.js:1569:19)</span><br><span class="line">    at Hexo.yamlHelper (E:\code\blog\node_modules\hexo\lib\plugins\renderer\yaml.js:7:15)</span><br><span class="line">    at Hexo.tryCatcher (E:\code\blog\node_modules\bluebird\js\release\util.js:16:23)</span><br><span class="line">    at Hexo.&lt;anonymous&gt; (E:\code\blog\node_modules\bluebird\js\release\method.js:15:34)</span><br><span class="line">    at Promise.then.text (E:\code\blog\node_modules\hexo\lib\hexo\render.js:61:21)</span><br><span class="line">    at tryCatcher (E:\code\blog\node_modules\bluebird\js\release\util.js:16:23)</span><br><span class="line">    at Promise._settlePromiseFromHandler (E:\code\blog\node_modules\bluebird\js\release\promise.js:512:31)</span><br><span class="line">    at Promise._settlePromise (E:\code\blog\node_modules\bluebird\js\release\promise.js:569:18)</span><br><span class="line">    at Promise._settlePromise0 (E:\code\blog\node_modules\bluebird\js\release\promise.js:614:10)</span><br><span class="line">    at Promise._settlePromises (E:\code\blog\node_modules\bluebird\js\release\promise.js:693:18)</span><br><span class="line">    at Async._drainQueue (E:\code\blog\node_modules\bluebird\js\release\async.js:133:16)</span><br><span class="line">    at Async._drainQueues (E:\code\blog\node_modules\bluebird\js\release\async.js:143:10)</span><br><span class="line">    at Immediate.Async.drainQueues (E:\code\blog\node_modules\bluebird\js\release\async.js:17:14)</span><br><span class="line">    at runCallback (timers.js:794:20)</span><br><span class="line">    at tryOnImmediate (timers.js:752:5)</span><br><span class="line">    at processImmediate [as _immediateCallback] (timers.js:729:5)</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">FATAL duplicated mapping key at line 86, column 3:</span><br><span class="line">      type: leancloud_counter_security ...</span><br><span class="line">      ^</span><br><span class="line">YAMLException: duplicated mapping key at line 86, column 3:</span><br><span class="line">      type: leancloud_counter_security ...</span><br><span class="line">      ^</span><br><span class="line">    at generateError (E:\code\blog\node_modules\js-yaml\lib\js-yaml\loader.js:165:10)</span><br><span class="line">    at throwError (E:\code\blog\node_modules\js-yaml\lib\js-yaml\loader.js:171:9)</span><br><span class="line">    at storeMappingPair (E:\code\blog\node_modules\js-yaml\lib\js-yaml\loader.js:308:7)</span><br><span class="line">    at readBlockMapping (E:\code\blog\node_modules\js-yaml\lib\js-yaml\loader.js:1071:9)</span><br><span class="line">    at composeNode (E:\code\blog\node_modules\js-yaml\lib\js-yaml\loader.js:1332:12)</span><br><span class="line">    at readBlockMapping (E:\code\blog\node_modules\js-yaml\lib\js-yaml\loader.js:1062:11)</span><br><span class="line">    at composeNode (E:\code\blog\node_modules\js-yaml\lib\js-yaml\loader.js:1332:12)</span><br><span class="line">    at readDocument (E:\code\blog\node_modules\js-yaml\lib\js-yaml\loader.js:1492:3)</span><br><span class="line">    at loadDocuments (E:\code\blog\node_modules\js-yaml\lib\js-yaml\loader.js:1548:5)</span><br><span class="line">    at Object.load (E:\code\blog\node_modules\js-yaml\lib\js-yaml\loader.js:1569:19)</span><br><span class="line">    at Hexo.yamlHelper (E:\code\blog\node_modules\hexo\lib\plugins\renderer\yaml.js:7:15)</span><br><span class="line">    at Hexo.tryCatcher (E:\code\blog\node_modules\bluebird\js\release\util.js:16:23)</span><br><span class="line">    at Hexo.&lt;anonymous&gt; (E:\code\blog\node_modules\bluebird\js\release\method.js:15:34)</span><br><span class="line">    at Promise.then.text (E:\code\blog\node_modules\hexo\lib\hexo\render.js:61:21)</span><br><span class="line">    at tryCatcher (E:\code\blog\node_modules\bluebird\js\release\util.js:16:23)</span><br><span class="line">    at Promise._settlePromiseFromHandler (E:\code\blog\node_modules\bluebird\js\release\promise.js:512:31)</span><br><span class="line">    at Promise._settlePromise (E:\code\blog\node_modules\bluebird\js\release\promise.js:569:18)</span><br><span class="line">    at Promise._settlePromise0 (E:\code\blog\node_modules\bluebird\js\release\promise.js:614:10)</span><br><span class="line">    at Promise._settlePromises (E:\code\blog\node_modules\bluebird\js\release\promise.js:693:18)</span><br><span class="line">    at Async._drainQueue (E:\code\blog\node_modules\bluebird\js\release\async.js:133:16)</span><br><span class="line">    at Async._drainQueues (E:\code\blog\node_modules\bluebird\js\release\async.js:143:10)</span><br><span class="line">    at Immediate.Async.drainQueues (E:\code\blog\node_modules\bluebird\js\release\async.js:17:14)</span><br></pre></td></tr></table></figure><p>这个问题，很简单，就是博客配置文件中deploy的那个位置，没写明白。如何让git和leancloud同时部署呢，如下：<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="bullet">  -</span> </span><br><span class="line"><span class="attr">    type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">    repository:</span> <span class="string">git@github.com:lmnsyunhao/lmnsyunhao.github.io.git</span></span><br><span class="line"><span class="attr">    branch:</span> <span class="string">master</span></span><br><span class="line"><span class="bullet">  -</span></span><br><span class="line"><span class="attr">    type:</span> <span class="string">leancloud_counter_security_sync</span></span><br></pre></td></tr></table></figure></p><p>这样写就行了。具体为啥这样写，简单学习一下YAML语法就好了。不做赘述  </p><h1 id="部署过程中leancloud过多请求问题"><a href="#部署过程中leancloud过多请求问题" class="headerlink" title="部署过程中leancloud过多请求问题"></a>部署过程中leancloud过多请求问题</h1><p>如果没出现这个问题就跳过这一节。<br><code>deploy d</code>的过程中，还可能出现这个问题。看描述是请求过多。如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ERROR Too many requests. [429 POST https://xtppdvlr.api.lncld.net/1.1/classes/Counter]</span><br><span class="line">Error: Too many requests. [429 POST https://xtppdvlr.api.lncld.net/1.1/classes/Counter]</span><br><span class="line">    at E:\code\blog\node_modules\leancloud-storage\dist\node\request.js:163:17</span><br><span class="line">    at tryCatch (E:\code\blog\node_modules\es6-promise\dist\es6-promise.js:410:12)</span><br><span class="line">    at invokeCallback (E:\code\blog\node_modules\es6-promise\dist\es6-promise.js:425:13)</span><br><span class="line">    at publish (E:\code\blog\node_modules\es6-promise\dist\es6-promise.js:399:7)</span><br><span class="line">    at publishRejection (E:\code\blog\node_modules\es6-promise\dist\es6-promise.js:340:3)</span><br><span class="line">    at flush (E:\code\blog\node_modules\es6-promise\dist\es6-promise.js:128:5)</span><br><span class="line">    at _combinedTickCallback (internal/process/next_tick.js:131:7)</span><br><span class="line">    at process._tickCallback (internal/process/next_tick.js:180:9)</span><br></pre></td></tr></table></figure></p><blockquote><p>信息 - Too many requests.<br>含义 - 超过应用的流控限制，即超过每个应用同一时刻最多可使用的工作线程数，或者说同一时刻最多可以同时处理的数据请求。通过 控制台 &gt; 存储 &gt; API 统计 &gt; API 性能 &gt; 总览 可以查看应用产生的请求统计数据，如平均工作线程、平均响应时间等。使用 LeanCloud 商用版或企业版 的用户，如有需要，可以联系我们来调整工作线程数。</p></blockquote><p>以上是LeanCloud官方解释。<br>这个就是你第一次部署的时候，你的博文太多了，leancloud那边儿收不过来。<br>但是慢慢的我发现，在LeanCloud控制台那边儿所有的博文都已经有对应的记录了，但是每次<code>hexo d</code>时候还是报错，那是因为请求太快了。我查看了一下hexo-leancloud-counter-security的源代码，发现源代码中每次请求都会把所有博文的记录逐条查询。所以，我改了改源代码，详见<a href="/2018/06/29/hexo-leancloud-counter-security-too-many-requests-error/">hexo-leancloud-counter-security过多请求错误</a>  </p><h1 id="查看记录"><a href="#查看记录" class="headerlink" title="查看记录"></a>查看记录</h1><p>这里能够查看记录。<br><code>time</code>就是阅读次数。这里可以直接改实现骚操作。<br><code>title</code>，<code>url</code>和<code>createdAt</code>字段不要乱改，不然容易出现问题。<br><img src="https://images.yunhao.space/pica/hexo-leancloud-plugin-installation-tutor/22.png" alt="查看记录"></p><h1 id="安全中心保护"><a href="#安全中心保护" class="headerlink" title="安全中心保护"></a>安全中心保护</h1><p>点击设置，安全中心，Web安全域名。这个保证只有对应域名传过来的才有效，也就是说，别人用你的应用ID和应用Key是无效的。<br><img src="https://images.yunhao.space/pica/hexo-leancloud-plugin-installation-tutor/15.png" alt="安全中心保护"></p><h1 id="云引擎保护"><a href="#云引擎保护" class="headerlink" title="云引擎保护"></a>云引擎保护</h1><p>云引擎保护访客数量不被随意篡改。<br>点击云引擎，部署，在线编辑。<br><img src="https://images.yunhao.space/pica/hexo-leancloud-plugin-installation-tutor/16.png" alt="在线编辑"><br>然后点击创建函数。<br><img src="https://images.yunhao.space/pica/hexo-leancloud-plugin-installation-tutor/17.png" alt="创建函数"><br>弹出的框中，选择Hook，beforeUpdate，Counter，函数内填写如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> query = <span class="keyword">new</span> AV.Query(<span class="string">"Counter"</span>);</span><br><span class="line"><span class="keyword">if</span> (request.object.updatedKeys.indexOf(<span class="string">'time'</span>) !== <span class="number">-1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> query.get(request.object.id).then(<span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (obj.get(<span class="string">"time"</span>) + <span class="number">1</span> !== request.object.get(<span class="string">"time"</span>)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> AV.Cloud.Error(<span class="string">'Invalid update!'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后点击保存。<br><img src="https://images.yunhao.space/pica/hexo-leancloud-plugin-installation-tutor/18.png" alt="Counter函数定义"><br>之后，我们能看到已经多了一个函数，然后点击上边的部署。<br><img src="https://images.yunhao.space/pica/hexo-leancloud-plugin-installation-tutor/19.png" alt="部署"><br>弹出对话框，点击部署<br><img src="https://images.yunhao.space/pica/hexo-leancloud-plugin-installation-tutor/20.png" alt="部署确认"><br>等待，直到部署完成，如下：<br><img src="https://images.yunhao.space/pica/hexo-leancloud-plugin-installation-tutor/21.png" alt="部署完成"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录一次大折腾。LeanCLoud这个是记录单篇博文阅读量的一个东西，之前配过一次，没这么难，这次学习了之后，发现这个东西还是挺麻烦的。多配几次就不麻烦了。mark一下。  &lt;/p&gt;
    
    </summary>
    
      <category term="Hexo" scheme="http://yunhao.space/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://yunhao.space/tags/Hexo/"/>
    
      <category term="NexT" scheme="http://yunhao.space/tags/NexT/"/>
    
      <category term="LeanCloud" scheme="http://yunhao.space/tags/LeanCloud/"/>
    
  </entry>
  
  <entry>
    <title>Hexo d 时遇到 Host Key Verification Failed 问题</title>
    <link href="http://yunhao.space/2018/06/24/hexo-d-host-key-verification-failed-issue/"/>
    <id>http://yunhao.space/2018/06/24/hexo-d-host-key-verification-failed-issue/</id>
    <published>2018-06-23T16:09:57.000Z</published>
    <updated>2019-01-23T05:03:13.357Z</updated>
    
    <content type="html"><![CDATA[<p>Verification Failed，我记得之前就出现过这种问题，当时忘记了怎么解决的了。而且，也不确定真的是同一类问题。所以，我就先mark一下。  </p><a id="more"></a><h1 id="症状"><a href="#症状" class="headerlink" title="症状"></a>症状</h1><p>今天，在hexo d的时候遇到一个奇怪的问题，这个问题之前没出现过。自打win10更新一次以后就有问题了，不知道是不是更新的问题。以下是hexo报的log<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">On branch master</span><br><span class="line">nothing to commit, working tree clean</span><br><span class="line">Host key verification failed.</span><br><span class="line">fatal: Could not read from remote repository.</span><br><span class="line"></span><br><span class="line">Please make sure you have the correct access rights</span><br><span class="line">and the repository exists.</span><br><span class="line">FATAL Something&apos;s wrong. Maybe you can find the solution here: http://hexo.io/docs/troubleshooting.html</span><br><span class="line">Error: Host key verification failed.</span><br><span class="line">fatal: Could not read from remote repository.</span><br><span class="line"></span><br><span class="line">Please make sure you have the correct access rights</span><br><span class="line">and the repository exists.</span><br><span class="line"></span><br><span class="line">    at ChildProcess.&lt;anonymous&gt; (E:\code\blog\node_modules\hexo-util\lib\spawn.js:37:17)</span><br><span class="line">    at emitTwo (events.js:126:13)</span><br><span class="line">    at ChildProcess.emit (events.js:214:7)</span><br><span class="line">    at ChildProcess.cp.emit (E:\code\blog\node_modules\cross-spawn\lib\enoent.js:40:29)</span><br><span class="line">    at maybeClose (internal/child_process.js:925:16)</span><br><span class="line">    at Socket.stream.socket.on (internal/child_process.js:346:11)</span><br><span class="line">    at emitOne (events.js:116:13)</span><br><span class="line">    at Socket.emit (events.js:211:7)</span><br><span class="line">    at Pipe._handle.close [as _onclose] (net.js:567:12)</span><br></pre></td></tr></table></figure></p><p>大概说的是ssh key认证失败，不能读取远程库。然后我把自己电脑上的rsa_pub重新放到了github上一次，结果还是失败。  </p><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p>要提前用ssh连一下github，把github的公钥记录在本地的know_hosts里面就好了。具体方法是，在cmd中输入如下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh git@github.com</span><br></pre></td></tr></table></figure></p><p>然后输入yes。<br>之后再进行<code>hexo d</code>的时候就没这个问题了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Verification Failed，我记得之前就出现过这种问题，当时忘记了怎么解决的了。而且，也不确定真的是同一类问题。所以，我就先mark一下。  &lt;/p&gt;
    
    </summary>
    
      <category term="Hexo" scheme="http://yunhao.space/categories/Hexo/"/>
    
    
      <category term="Git" scheme="http://yunhao.space/tags/Git/"/>
    
      <category term="GitHub" scheme="http://yunhao.space/tags/GitHub/"/>
    
      <category term="Hexo" scheme="http://yunhao.space/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Do U Need A Ladder ?</title>
    <link href="http://yunhao.space/2018/06/20/do-you-need-a-ladder/"/>
    <id>http://yunhao.space/2018/06/20/do-you-need-a-ladder/</id>
    <published>2018-06-20T14:09:21.000Z</published>
    <updated>2019-01-23T05:03:13.357Z</updated>
    
    <content type="html"><![CDATA[<p>授人以鱼不如授人以渔，我给你一个Ladder，不如教你配个Ladder。本文包括配IPv4，IPv6连接VPS，IPv6+Proxifier免校园网流量。然后还有过程中遇到的一些奇怪问题。mark一下。  </p><a id="more"></a><h1 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h1><p>请将本文中所有的“暗影袜子们”替换成如下字眼<br><img src="https://images.yunhao.space/pica/do-you-need-a-ladder/socks.png" alt="暗影袜子"></p><h1 id="安装SS"><a href="#安装SS" class="headerlink" title="安装SS"></a>安装SS</h1><p>在服务器端操作。<br>我购买的是Digital Ocean的服务器，Ubuntu16.04系统。<br>确认当前是root用户，通过pip安装。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install python-pip</span><br><span class="line">pip install --upgrade pip</span><br><span class="line">pip install 暗影袜子们</span><br></pre></td></tr></table></figure></p><p>如果你不想用这种方式安装SS，那么可以看<code>apt方式安装SS</code>一节。  </p><h1 id="pip无法安装的问题"><a href="#pip无法安装的问题" class="headerlink" title="pip无法安装的问题"></a>pip无法安装的问题</h1><p>在上边安装的时候，可能会出现下面的问题，如果出现了，就解决一下，没出现当然就不用管这一节。报错如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"/usr/bin/pip"</span>, line 9, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    from pip import main</span><br><span class="line">ImportError: cannot import name main</span><br></pre></td></tr></table></figure></p><p>解决方法是修改<code>/usr/bin/pip</code>文件，改成下面的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">from pip import __main__</span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    sys.exit(__main__._main())</span><br></pre></td></tr></table></figure></p><h1 id="apt方式安装SS"><a href="#apt方式安装SS" class="headerlink" title="apt方式安装SS"></a>apt方式安装SS</h1><p>直接在命令行输入下面命令，如果有权限问题，注意加上sudo:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt install 暗影袜子们</span><br></pre></td></tr></table></figure></p><p>这样安装与上边有2点区别。<br>第一，apt安装方式，ssserver的位置在<code>/usr/bin/ssserver</code>，而pip安装方法，ssserver在<code>/usr/local/bin/ssserver</code><br>第二，apt安装方式，ssserver没法加<code>-d</code>参数。不过这不要紧，用<code>systemd</code>设置开机自动时候不需要-d参数。  </p><h1 id="配置IPv4连接"><a href="#配置IPv4连接" class="headerlink" title="配置IPv4连接"></a>配置IPv4连接</h1><p>在服务器端操作。<br>创建配置文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/暗影袜子们.json</span><br></pre></td></tr></table></figure></p><p>json文件中填写，如下<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"server"</span>:<span class="string">"服务器ip"</span>,</span><br><span class="line">    <span class="attr">"server_port"</span>:<span class="number">8388</span>,</span><br><span class="line">    <span class="attr">"local_address"</span>: <span class="string">"127.0.0.1"</span>,</span><br><span class="line">    <span class="attr">"local_port"</span>:<span class="number">1080</span>,</span><br><span class="line">    <span class="attr">"password"</span>:<span class="string">"自己设置的密码"</span>,</span><br><span class="line">    <span class="attr">"timeout"</span>:<span class="number">300</span>,</span><br><span class="line">    <span class="attr">"method"</span>:<span class="string">"aes-256-cfb"</span>,</span><br><span class="line">    <span class="attr">"fast_open"</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><table><thead><tr><th>字段名称</th><th>各个字段的含义</th></tr></thead><tbody><tr><td>Name</td><td>解释说明</td></tr><tr><td>server</td><td>监听的服务器地址</td></tr><tr><td>server_port</td><td>监听的服务器端口</td></tr><tr><td>local_address</td><td>本地监听的地址</td></tr><tr><td>local_port</td><td>本地坚挺的端口</td></tr><tr><td>password</td><td>登陆用的密码</td></tr><tr><td>timeout</td><td>按秒计算</td></tr><tr><td>method</td><td>加密方法 默认是”aes-256-cfb”</td></tr><tr><td>fast_open</td><td>快速打开，TCP_FASTOPEN, 填写true或者false</td></tr><tr><td>workers</td><td>number of workers, available on Unix/Linux</td></tr></tbody></table><p>大家在设置的时候最好不要弄错了，就想例子中的那样。一个空格最好都不要错，否则容易出莫名其妙的问题。  </p><h1 id="配置IPv6连接"><a href="#配置IPv6连接" class="headerlink" title="配置IPv6连接"></a>配置IPv6连接</h1><p>在服务器端操作<br>如果你的服务器有ipv6的公网地址，那么你可以通过ipv6来连接你的VPS。那么配置文件中就如下填写：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"server"</span>:<span class="string">"::"</span>,</span><br><span class="line">    <span class="attr">"server_port"</span>:<span class="number">8388</span>,</span><br><span class="line">    <span class="attr">"local_address"</span>: <span class="string">"127.0.0.1"</span>,</span><br><span class="line">    <span class="attr">"local_port"</span>:<span class="number">1080</span>,</span><br><span class="line">    <span class="attr">"password"</span>:<span class="string">"自己设置的密码"</span>,</span><br><span class="line">    <span class="attr">"timeout"</span>:<span class="number">300</span>,</span><br><span class="line">    <span class="attr">"method"</span>:<span class="string">"aes-256-cfb"</span>,</span><br><span class="line">    <span class="attr">"fast_open"</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>就是server字段填::，这么填以后，你可以使用ipv6连接，也可以使用ipv4连接，亲测。  </p><h1 id="启动ssserver服务"><a href="#启动ssserver服务" class="headerlink" title="启动ssserver服务"></a>启动ssserver服务</h1><p>在服务器端操作。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssserver -c /etc/暗影袜子们.json</span><br></pre></td></tr></table></figure></p><p>输入命令就能够开启ssserver服务了<br>上面的命令是工作在前台的进程。如果想把ssserver放到后台工作。那么用下面的命令启动和停止。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssserver -c /etc/暗影袜子们.json -d start</span><br><span class="line">ssserver -c /etc/暗影袜子们.json -d stop</span><br></pre></td></tr></table></figure></p><p>如果你发现你的ssserver不支持-d命令的话，那么就是你安装暗影袜子们时候有问题。重装吧就。  </p><h1 id="客户端配置"><a href="#客户端配置" class="headerlink" title="客户端配置"></a>客户端配置</h1><p>在客户端操作<br>windows的客户端点选“添加服务器”，填写“地址”、“端口”、“加密方法”和“密码”即可。其中“端口”、“加密方法”和“密码”与前面设置的服务器配置相同。然后右键右下键的小飞机，确保服务器那块儿勾选的是自己刚刚配好的服务器<br>如果服务器支持IPv4和IPv6双栈，那么客户端实际可以配置两个服务器参数，其仅有“地址”不相同。对于IPv4，填写服务器的IPv4地址；对于IPv6，填写服务器的IPv6地址（末尾不用加/64，也不用写[]）<br>对于Ubuntu的配置，请看本文<code>Ubuntu16.04 SS客户端 SwitchyOmega配置</code>一节。</p><h1 id="测试连通性"><a href="#测试连通性" class="headerlink" title="测试连通性"></a>测试连通性</h1><p>为了保险起见，客户端选择IPv4连接服务器。<br>解释一下<code>系统代理模式</code>中的<code>全局模式</code>和<code>PAC模式</code>，PAC就是一个规则，定义了有哪些网站在国内，有哪些网站在国外。如果选择了全局模式，不管访问国内还是国外的网站，都会走VPS代理；而PAC模式，只有在国外的走代理，国内的不走。但是PAC规则更新慢的话，有时候还得调成全局模式。全局模式访问国内网站，比PAC访问国内网站要慢一点，因为走了代理。<br>客户端设置好之后，看是不是能够正常的登上梯子（客户端登陆<code>youtube.com</code>）。如果正常，那么就成功了。<br>设置客户端中服务器为IPv6地址的，同样访问上述网站，若都能很快正常打开，则成功。<br>可以测试一下支不支持IPv6，访问网站<a href="https://test-ipv6.com/" target="_blank" rel="noopener">IPv6测试</a></p><h1 id="ssserver配置systemd开机启动"><a href="#ssserver配置systemd开机启动" class="headerlink" title="ssserver配置systemd开机启动"></a>ssserver配置systemd开机启动</h1><p>在服务器端操作<br>systemd配置文件一般存在于<code>/lib/systemd/system/</code>和<code>/etc/systemd/system/</code>这两个文件夹下，我们需要在<code>/lib/systemd/system</code>下创建配置文件。如下：如果创建过程中有权限问题，自觉用<code>sudo</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /lib/systemd/system</span><br><span class="line">vim ssserver.service</span><br></pre></td></tr></table></figure></p><p>文件中写如下内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># /lib/systemd/system/ssserver.service</span><br><span class="line"></span><br><span class="line">[Unit]</span><br><span class="line">Description=ssserver</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">ExecStart=/usr/local/bin/ssserver -c /etc/暗影袜子们.json</span><br><span class="line">Restart=on-failure</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure></p><p>创建了文件之后，需要重新加载配置一下。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br></pre></td></tr></table></figure></p><p>确保ssserver处于关闭状态，然后试试把刚才创建的ssserver.service启动<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start ssserver.service</span><br></pre></td></tr></table></figure></p><p>如果没报任何信息的话，查看一下状态。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status ssserver.service</span><br></pre></td></tr></table></figure></p><p>如果显示running的话，那么就是配置成功了，然后设置一下开机启动。<br>如果没有显示running，启动失败了的话，看下你们的<code>暗影袜子们.json</code>这个文件内容有没有写错，最好空格什么的不要少，也不要多。然后看下ssserver这个东西是不是在<code>/usr/local/bin/ssserver</code>这。用命令<code>which ssserver</code>看看这个是不是对的，有可能在<code>/usr/bin/ssserver</code>路径。然后把上边的那个文件<code>ssserver.service</code>中对应位置改成<code>/usr/bin/ssserver</code>。这样应该就能成了。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> ssserver.service</span><br></pre></td></tr></table></figure></p><p>到这里，已经达到目的了，下面是一些有意思的操作，感兴趣的可以看一下。不感兴趣的不看也ok。  </p><h1 id="配置全局代理-Proxifier"><a href="#配置全局代理-Proxifier" class="headerlink" title="配置全局代理+Proxifier"></a>配置全局代理+Proxifier</h1><blockquote><p>Proxifier这个软件可以修改电脑上应用程序的代理，对于某些程序本身没有提供配置代理的功能时候，用这个方法就能够配置应用程序的代理了。  </p></blockquote><p>配置这个的目的是让VPS和本地间走ipv6流量，然后系统代理模式选择全局代理，也就是说让所有的网络访问都走VPS。这样的话，也就是说所有的网络都走ipv6。这种情况下会有一些问题。有的软件不支持用前面这种形式访问网络。这个时候我们就需要一个叫做Proxifier的软件来给这些软件搞一下，让他们也能正常了。因为都是ipv6，所以就免流量了，而且不用登录校园网，这就是我们要的效果。<br>首先，VPS那边得是ipv6能够访问的，就是配好了上边说的ipv6连接，其次，本地也需要有ipv6的地址。二者缺一不可。然后。配置一下Proxifier。配置方法如下：<br>打开Proxifier，然后Profile，Proxy Servers，点击右侧Add。<br><img src="https://images.yunhao.space/pica/do-you-need-a-ladder/1.png" alt="1"><br>如下这样添加。点击确定。<br><img src="https://images.yunhao.space/pica/do-you-need-a-ladder/2.png" alt="2"><br>添加之后如下图：<br><img src="https://images.yunhao.space/pica/do-you-need-a-ladder/3.png" alt="3"><br>打开，Profile，Proxification Rules。<br><img src="https://images.yunhao.space/pica/do-you-need-a-ladder/4.png" alt="4"><br>如下设置<br><img src="https://images.yunhao.space/pica/do-you-need-a-ladder/5.png" alt="5"><br>点击Profile，Name Resolution：<br><img src="https://images.yunhao.space/pica/do-you-need-a-ladder/6.png" alt="6"><br>如下设置：<br><img src="https://images.yunhao.space/pica/do-you-need-a-ladder/7.png" alt="7"><br>这个时候，注销校园网络登陆。然后看看行不行？如果qq能正常使用，说明大功告成了。下次再使用的时候，ipv6连接+Proxifier都打开，就能够免流量了。<br>我用的是有线连接的校园网（没登录），没测试无线能不能用，不过如果无线连接的时候，本地有ipv6地址的话，应该就能用。  </p><p>这时候会出问题，比如使用localhost:4000调试hexo时候，会无法访问。感觉是dns问题，因为现在是ipv6，可能会解析到ipv6的地址，然后proxifier会报错说，没法解决ipv4和ipv6混合使用的问题。这个时候不用localhost:4000，访问127.0.0.1:4000就能调试hexo了。  </p><h1 id="Google-BBR-加速"><a href="#Google-BBR-加速" class="headerlink" title="Google BBR 加速"></a>Google BBR 加速</h1><p>说是能给网络加速，实际效果感觉并不明显，还是写一下吧。<br>root登陆服务器，输入下面命令。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget --no-check-certificate https://github.com/teddysun/across/raw/master/bbr.sh</span><br><span class="line">chmod +x bbr.sh</span><br><span class="line">./bbr.sh</span><br></pre></td></tr></table></figure></p><p>安装完事儿之后会让重启服务器，然后就重启吧。<br>输入下面命令。验证是否安装最新内核并开启了BBR。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname -r</span><br></pre></td></tr></table></figure></p><p>查看一下；<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sysctl net.ipv4.tcp_available_congestion_control</span><br></pre></td></tr></table></figure></p><p>上面结果中，看看等号后边带不带bbr，带就行。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sysctl net.ipv4.tcp_congestion_control</span><br></pre></td></tr></table></figure></p><p>上面结果应该等于bbr。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sysctl net.core.default_qdisc</span><br></pre></td></tr></table></figure></p><p>上面结果应该等于fq。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsmod | grep bbr</span><br></pre></td></tr></table></figure></p><p>上面结果中，看看有没有tcp_bbr，说明已经启动。  </p><h1 id="过了两天"><a href="#过了两天" class="headerlink" title="过了两天"></a>过了两天</h1><p>我保证我这两天，没动服务器，也没开电脑。然后就出现了一个状况。<br>ipv6可以连上服务器，但是ipv4死活连不上服务器。经过一番排查，我感觉是服务器那边的问题。然后，于此同时我用ssh竟然没法连接DigitalOcean的服务器了。闹心。<br>我这个DigitalOcean最开始新建Droplet的时候，没有选ssh。不过，最开始的时候是能够用ssh连的，然后过了两天就连接超时，只能通过网页端的console连接。<br>我查了不少教程又看了官方文档。并不会解决，然后我将droplet的系统重装了。然后依旧是这个问题。<br>然后，我就把这个droplet删了。新建了一个droplet，新建时候上传了ssh公钥，并选择了对应的公钥。然后，当然ssh的连接超时的问题就解决了。<br>然后照着我上边说的又走了一遍，ipv4连不上的问题也解决了。  </p><h1 id="Ubuntu16-04-SS客户端-浏览器-SwitchyOmega配置"><a href="#Ubuntu16-04-SS客户端-浏览器-SwitchyOmega配置" class="headerlink" title="Ubuntu16.04 SS客户端 浏览器 SwitchyOmega配置"></a>Ubuntu16.04 SS客户端 浏览器 SwitchyOmega配置</h1><p>这里说下Ubuntu配置，Ubuntu的配置相对较麻烦。<br>首先需要在客户端安装暗影袜子们。安装方式与上面相似。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install python-pip</span><br><span class="line">pip install --upgrade pip</span><br><span class="line">pip install 暗影袜子们</span><br></pre></td></tr></table></figure></p><p>当然，如果出现pip无法安装的问题，请看上面的那节，同样解决一下。<br>安完之后，在<code>/etc</code>目录下新建一个<code>暗影袜子们.json</code>的文件。文件中如下填写：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"server"</span>:<span class="string">"上面配好的服务器的ip"</span>,</span><br><span class="line">    <span class="attr">"server_port"</span>:<span class="number">8388</span>,</span><br><span class="line">    <span class="attr">"local_address"</span>:<span class="string">"127.0.0.1"</span>,</span><br><span class="line">    <span class="attr">"local_port"</span>:<span class="number">1080</span>,</span><br><span class="line">    <span class="attr">"password"</span>:<span class="string">"自己设置的密码"</span>,</span><br><span class="line">    <span class="attr">"timeout"</span>:<span class="number">300</span>,</span><br><span class="line">    <span class="attr">"method"</span>:<span class="string">"aes-256-cfb"</span>,</span><br><span class="line">    <span class="attr">"fast_open"</span>:<span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>其实这个文件和上面的那个配置文件好像一样。然后，启动下看看能否成功启动<code>sslocal -c /etc/暗影袜子们.json</code>，如果能够正常启动，那么客户端这边儿就和服务器连上了。但是打开chrome，还是没法出去，比如油管网。这个时候，我们还需要配一下浏览器的代理。<br>我以chrome浏览器为例。讲解一下配置。有个东西叫做，<a href="https://www.switchyomega.com/download/" target="_blank" rel="noopener">SwitchyOmega</a>，点击链接下载，如下<br><img src="https://images.yunhao.space/pica/do-you-need-a-ladder/8.png" alt="SwitchyOmega"><br>下载了之后应该是一个以crx后缀的文件。在浏览器的地址栏输入：<code>chrome://extensions</code>，将刚才下载的crx文件拖动到这里，会提示安装。如下<br><img src="https://images.yunhao.space/pica/do-you-need-a-ladder/9.png" alt="安装"><br>然后，等待安装成功会有提示，打开SwitchyOmega，配置一下代理。点击左侧<code>新建情景模式</code>，弹出对话框。<code>名称</code>随便起，<code>类型</code>选代理服务器，然后点击<code>创建</code>，如下图<br><img src="https://images.yunhao.space/pica/do-you-need-a-ladder/10.png" alt="新建情景模式"><br>然后点击新建的情景模式，<code>代理协议</code>选择SOCKS5，<code>代理服务器</code>填写127.0.0.1，<code>代理端口</code>填写1080。然后点击<code>应用选项</code><br><img src="https://images.yunhao.space/pica/do-you-need-a-ladder/11.png" alt="设置情景模式"><br>然后再点击左侧的<code>auto switch</code>然后，勾选规则列表规则，后边选SS，就是你刚才配的情景模式，默认情景模式选择直接连接，规则列表格式选择AutoProxy规则列表地址填写<code>https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt</code>，然后点击立即更新情景模式。然后点击应用选项。如下图：<br><img src="https://images.yunhao.space/pica/do-you-need-a-ladder/12.png" alt="设置情景模式"><br>这个时候再切换到<code>auto switch</code>就好了。访问一下<code>youtube.com</code>，应该就能成功了。<br><img src="https://images.yunhao.space/pica/do-you-need-a-ladder/13.png" alt="auto switch"><br>之后再配置一下sslocal的开机子启动，请见<code>sslocal配置systemd开机启动</code>一节。<br>PS:Windows上的chrome浏览器同样也可以加载这个插件，来增加规则，对于外边的网站走代理，里面的网站不走代理。配置过程相似。  </p><h1 id="sslocal配置systemd开机启动"><a href="#sslocal配置systemd开机启动" class="headerlink" title="sslocal配置systemd开机启动"></a>sslocal配置systemd开机启动</h1><p>在客户端操作<br>systemd配置文件一般存在于<code>/lib/systemd/system/</code>和<code>/etc/systemd/system/</code>这两个文件夹下，我们需要在<code>/etc/systemd/system</code>下创建配置文件。如下：如果创建过程中有权限问题，自觉用<code>sudo</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/systemd/system</span><br><span class="line">vim sslocal.service</span><br></pre></td></tr></table></figure></p><p>文件中写如下内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># /lib/systemd/system/sslocal.service</span><br><span class="line"></span><br><span class="line">[Unit]</span><br><span class="line">Description=sslocal</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">ExecStart=/usr/local/bin/sslocal -c /etc/暗影袜子们.json</span><br><span class="line">ExecStop=/bin/kill -s TERM $MAINPID</span><br><span class="line">Restart=on-failure</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure></p><p>创建了文件之后，需要重新加载配置一下。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br></pre></td></tr></table></figure></p><p>确保sslocal现在处于关闭状态，然后试试把刚才创建的sslocal.service启动<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start sslocal.service</span><br></pre></td></tr></table></figure></p><p>如果没报任何信息的话，查看一下状态。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status sslocal.service</span><br></pre></td></tr></table></figure></p><p>如果显示running的话，那么就是配置成功了，然后设置一下开机启动<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> sslocal.service</span><br></pre></td></tr></table></figure></p><h1 id="写在几个月后"><a href="#写在几个月后" class="headerlink" title="写在几个月后"></a>写在几个月后</h1><p>Digital Ocean把我的账号封了。于是，我换了一个VPS供应商，Vultr。配置方式都一样。  </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;授人以鱼不如授人以渔，我给你一个Ladder，不如教你配个Ladder。本文包括配IPv4，IPv6连接VPS，IPv6+Proxifier免校园网流量。然后还有过程中遇到的一些奇怪问题。mark一下。  &lt;/p&gt;
    
    </summary>
    
      <category term="服务器" scheme="http://yunhao.space/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="Ladder" scheme="http://yunhao.space/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/Ladder/"/>
    
    
      <category term="服务器" scheme="http://yunhao.space/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="代理" scheme="http://yunhao.space/tags/%E4%BB%A3%E7%90%86/"/>
    
      <category term="Ladder" scheme="http://yunhao.space/tags/Ladder/"/>
    
      <category term="Proxifier" scheme="http://yunhao.space/tags/Proxifier/"/>
    
      <category term="VPS" scheme="http://yunhao.space/tags/VPS/"/>
    
      <category term="DigitalOcean" scheme="http://yunhao.space/tags/DigitalOcean/"/>
    
      <category term="SwitchyOmega" scheme="http://yunhao.space/tags/SwitchyOmega/"/>
    
  </entry>
  
</feed>
